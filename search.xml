<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式语法及其简单应用</title>
      <link href="/2024/01/25/python%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
      <url>/2024/01/25/python%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><p>    在做项目过程中，需要使用Python对某段文本提取出特定的数字，以完成构建样本集。</p><h1>文章进度</h1><ol><li>一般正则表达式语法——pattern的编写</li><li>python的re库中基本函数的使用</li><li>简单示例——从文本中抽取出特定的数字</li></ol><h1>正则表达式</h1>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> re库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凸分析——凸集及其拓扑性质</title>
      <link href="/2023/10/04/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%87%B8%E5%88%86%E6%9E%90/%E5%87%B8%E9%9B%86%E5%8F%8A%E5%85%B6%E6%8B%93%E6%89%91%E6%80%A7%E8%B4%A8/"/>
      <url>/2023/10/04/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%87%B8%E5%88%86%E6%9E%90/%E5%87%B8%E9%9B%86%E5%8F%8A%E5%85%B6%E6%8B%93%E6%89%91%E6%80%A7%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 凸分析 </tag>
            
            <tag> 凸优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2023/04/06/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/python%E5%AD%A6%E4%B9%A0-0/"/>
      <url>/2023/04/06/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/python%E5%AD%A6%E4%B9%A0-0/</url>
      
        <content type="html"><![CDATA[<p><a name="kboaZ"></a></p><h2 id="面向过程编程">面向过程编程</h2><p>新的一年，当然是先祝自己happy birthday啦，再进行py的学习，欧克<br><a name="HuiUg"></a></p><h3 id="计算机指令和程序">计算机指令和程序:</h3><p>计算机硬件系统是由运算器，控制器，存储器，输入设备，输出设备组成，其中运算器和控制器又被称为中央处理器，传统计算机采用冯诺依曼结构，其两大特点是:1. 中央处理器和存储器分离 2.采用二进制<br><a name="aFKFP"></a></p><h3 id="注释">注释</h3><p>学习一门语言最开始应该知道的就是如何进行注释，因为有了注释，别人甚至是自己才知道这一段代码表示什么意思，用# 开头，后面跟着是注释的内容，#%%可以划分代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初识python</span></span><br><span class="line">msg=<span class="string">&#x27;hello!world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p><a name="ZPO9P"></a></p><h3 id="数字">数字</h3><p>包括整数(integer)与浮点数(float)，整数可以表示任意大小的整数，与c里面的短整型和长整型不一样，在python里面不加区分，3.2e-4值得是3.2*10^-4<br><a name="KVGKq"></a></p><h3 id="数据类型">数据类型</h3><p>：整型，浮点型，字符串型，布尔型，复数型，其中整型里面的不同进制这里提一下记法:0b 二进制 ; 0o 八进制; 0x 十六进制；当然还有传统的十进制. 布尔型就是True和False两种类型。复数型就是3+4j，虚数单位换成了j。使用type()函数可以检查数据的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">321</span></span><br><span class="line">b=<span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(a,a+b)</span><br><span class="line"><span class="built_in">print</span>(a-b)</span><br><span class="line"><span class="built_in">print</span>(a/b)</span><br><span class="line"><span class="built_in">print</span>(a//b)</span><br><span class="line"><span class="built_in">print</span>(a*b)</span><br><span class="line"><span class="built_in">print</span>(a**b)</span><br><span class="line">a=<span class="number">123</span></span><br><span class="line">b=<span class="number">2.5</span></span><br><span class="line">c=<span class="string">&#x27;ima&#x27;</span></span><br><span class="line">d=<span class="literal">True</span></span><br><span class="line">e=<span class="number">2</span>+<span class="number">3j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int() 将数据变为整数</span></span><br><span class="line"><span class="comment"># input() 从键盘中获得输入的数据</span></span><br><span class="line"><span class="comment"># %d %f  实现整数，浮点数 占位符</span></span><br><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;a=&#x27;</span>))</span><br><span class="line">b=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;b=&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d + %d = %d &#x27;</span>%(a, b, a+b ))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d - %d = %d &#x27;</span>%(a, b, a-b ))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 华氏变摄氏</span></span><br><span class="line">f=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;f=&#x27;</span>))</span><br><span class="line">c=(f-<span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%fF变成摄氏温度是%dC&#x27;</span>%(f,c))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入圆的半径输出周长和面积</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line">r=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;r=&#x27;</span>))  <span class="comment">#input 输入的数据类型是字符，所以需要把它强制变为float或者int，或者用eval函数把他的&#x27;&#x27;去掉，变成一个数据，而非字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(r))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;圆的周长是&#123;:.2f&#125; 圆的面积是&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">2</span>*m.pi*r,m.pi*r**<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入年份判断是不是闰年,是输出TRUE,不是输出False</span></span><br><span class="line"><span class="comment"># 是4的倍数但不是100的倍数是普通闰年,是100的倍数且是400的倍数是世纪闰年</span></span><br><span class="line">year=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;year=&#x27;</span>))</span><br><span class="line">result=year%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> year%<span class="number">100</span>!=<span class="number">0</span> <span class="keyword">or</span> year%<span class="number">100</span>==<span class="number">0</span> <span class="keyword">and</span> year%<span class="number">400</span>==<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><a name="OoAU6"></a></p><h3 id="字符串">字符串</h3><p>: 用单引号或者双引号括起来的内容,这两者是毫无区别的,但这只是单行的字符串,若是多行的字符串,需要用’‘’ 内容’‘’,或者&quot;“” 内容 “”&quot;这样表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">m1 = <span class="string">&quot;my name is bond,James bond&quot;</span></span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line">m2 = <span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">A:What&#x27;s your name?</span></span><br><span class="line"><span class="string">B:My name is bond,James bond.Very nice to see you!</span></span><br><span class="line"><span class="string">Comment:Salute to the 007,the famous character in a series of movies.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(m2)</span><br></pre></td></tr></table></figure><p><a name="nxAqQ"></a></p><h3 id="format-：格式化函数">format()：格式化函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&#x27;tl&#x27;</span></span><br><span class="line">book=<span class="string">&#x27;bite of python &#x27;</span></span><br><span class="line"><span class="comment"># 使用索引代替位置，python索引从0开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; wrote the &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name,book))</span><br><span class="line"><span class="comment"># 直接使用大括号&#123;&#125;占用位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; wrote the &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name,book))</span><br><span class="line"><span class="comment"># 直接在format后面定义变量,但是前面的变量用大括号括起来</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;name&#125; wrote the &#123;book&#125;&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;tlin&#x27;</span>,book=<span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"><span class="comment"># format还可以进行保留小数点后几位，关键在前面的:.nf</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1.0</span>/<span class="number">3</span>))  <span class="comment">#保留两位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1.0</span>/<span class="number">3</span>))  <span class="comment">#保留五位</span></span><br><span class="line"><span class="comment"># format还可以进行补充字符长度操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:-^8&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment"># ^声明进行补充,用-补充8位</span></span><br></pre></td></tr></table></figure><p><a name="EI9Ea"></a></p><h3 id="转义序列">转义序列</h3><p>对于字符串(string)中自带的 ’  &quot;  \等，若需要显示出来，则需要在符号前加一个反斜杠 \，一些重要的转义符,\n：转到下一行  \t: 制表符，但若在字符串的结尾打上,下一行接着写，则表示换行写入字符串，但仍然显示在同一行中。<br />注:在字符串前加上r或者R表示该字符串是原始(raw)字符串，加上转义字符后，也不会有任何效果，正如其名一样，非常地原始，不会经过任何处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转义字符</span></span><br><span class="line">m3=<span class="string">&#x27;I am \&#x27;a\&#x27; student &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(m3)</span><br><span class="line">m4=<span class="string">&#x27;you are my son. \</span></span><br><span class="line"><span class="string">hahahahhaah &#x27;</span></span><br><span class="line"><span class="comment"># m4=r&#x27;you are my son. \</span></span><br><span class="line"><span class="comment">#hahahahhaah\t  &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(m4)</span><br></pre></td></tr></table></figure><p><a name="KIslK"></a></p><h3 id="变量">变量</h3><p>正如其名，是可以变化的量，我们之前讨论的都是字面常量，是无法改变的。<br />命名规范:变量是标识符的一种，<br />标识符的命名需要遵守:</p><ul><li>开头第一个字符是大小写字母，unicode字符或者下划线 _</li><li>标识符的其他部分可以是大小写字母或者unicode字符，数字，下划线</li><li>标识符命名会区分大小写，只要有一个字符大小写不一致，那么这两个就是不一样的变量<br><a name="Jrxs9"></a></li></ul><h3 id="选择结构的使用">选择结构的使用:</h3><p>在Python中语句从上往下地实现，这是顺序结构。但光靠顺序结构是无法实现众多的功能，例如，游戏中，分数大于1000分，则game over，若小等于，则重来。又例如，若去餐厅吃饭，付费超过1000元，可成为vip，若小等于，则不行。生活中有许多这样的例子，这样的结构叫做选择结构。在语法上，运用关键词if…else…,多条件时，用if…elif…else…,下面通过例子看怎么用选择结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spyder中ctrl+1 单行注释；ctrl+4 多行注释</span></span><br><span class="line"><span class="comment"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span></span><br><span class="line"><span class="comment"># 单if...else...使用</span></span><br><span class="line">username=<span class="built_in">input</span>(<span class="string">&#x27;username=&#x27;</span>)</span><br><span class="line">password=<span class="built_in">input</span>(<span class="string">&#x27;password=&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> username==<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password==<span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;身份验证成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;身份验证失败&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择多分支结构</span></span><br><span class="line"><span class="comment">#         3x - 5  (x &gt; 1)</span></span><br><span class="line"><span class="comment"># f(x) =  x + 2   (-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="comment">#         5x + 3  (x &lt; -1)</span></span><br><span class="line">x=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x=&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">1</span>:</span><br><span class="line">    y=<span class="number">3</span>*x-<span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> x&gt;=-<span class="number">1</span>:</span><br><span class="line">    y=x+<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y=<span class="number">5</span>*x+<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f(%.2f)=%.2f&#x27;</span>%(x,y))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 英制单位英寸与公制单位厘米互换。</span></span><br><span class="line"><span class="comment"># 查百度得知: 1 in= 2.54cm</span></span><br><span class="line">value=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;value=&#x27;</span>))</span><br><span class="line">unit=<span class="built_in">input</span>(<span class="string">&#x27;unit=inch/cm：&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> unit==<span class="string">&#x27;inch&#x27;</span>:</span><br><span class="line">    y=value*<span class="number">2.54</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%.2f in=%.2f cm&#x27;</span>%(value,y))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y=value/<span class="number">2.54</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%.2f cm=%.2f in&#x27;</span>%(value,y))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要求：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</span></span><br><span class="line">grade=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;grade=&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> grade&gt;=<span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> grade&gt;=<span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> grade&gt;=<span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> grade&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;E&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> mt</span><br><span class="line">a=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;a=&#x27;</span>))</span><br><span class="line">b=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;b=&#x27;</span>))</span><br><span class="line">c=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;c=&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> b+c&gt;a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;三条边%f,%f,%f可以构成三角形&#x27;</span>%(a,b,c))</span><br><span class="line">    p=(a+b+c)/<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;三角形周长为%f&#x27;</span>%(p*<span class="number">2</span>))</span><br><span class="line">    s=mt.sqrt(p*(p-a)*(p-b)*(p-c))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;三角形的面积为%f&#x27;</span>%(s))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;三条边无法构成三角形&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="QXdd5"></a></p><h3 id="循环结构的使用-loop">循环结构的使用(loop)</h3><p>循环结构就是让程序中的某些指令或者代码片段重复执行的结构，有以下两种做法:for…in…结构和while循环</p><ul><li>for…in…:如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用for-in循环<br>:::info<br>range的用法:<br />range(101)：可以用来产生0到100范围的整数，需要注意的是取不到101。<br />range(1, 101)：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。<br />range(1, 101, 2)：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。<br />range(100, 0, -2)：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。<br>:::</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对1....100进行求和</span></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span>+=i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对1....100间偶数求和</span></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">0</span>,-<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span>+=i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><ul><li>while循环:如果要构造不知道具体循环次数的循环结构，我们推荐使用while循环。while循环通过一个能够产生或转换出bool值的表达式来控制循环，表达式的值为True则继续循环；表达式的值为False则结束循环。<br>:::info<br>下面讲一下:break和continue的区别: break是跳出本个循环,不再执行循环内容，continue是跳出本轮循环，继续循环<br>:::</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 猜数字游戏</span></span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rd</span><br><span class="line">answer=rd.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="comment">#randint(a,b)是 a=&lt;x&lt;=b</span></span><br><span class="line">counter=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    number=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;your choice is ：&#x27;</span>))</span><br><span class="line">    counter+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> number&gt;answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> number&lt;answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you are right&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you have guessed %d results&#x27;</span>%(counter))</span><br><span class="line"><span class="keyword">if</span> counter&gt;<span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you need to eat more food,hahaha&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you are so smart,you have mastered the secret of playing this game&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d*%d=%d&#x27;</span>%(i,j,i*j),end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>下面有三个小练习:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">number=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;number=&#x27;</span>))</span><br><span class="line">counter=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,number+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> number%i==<span class="number">0</span>:</span><br><span class="line">        counter+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> counter&lt;=<span class="number">2</span> <span class="keyword">and</span> number!=<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d is a prime number&#x27;</span>%(number))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d isn\&#x27;t a prime number&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a&gt;=b:</span><br><span class="line">    a,b=a,b</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    a,b=b,a</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a,<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> a%i==<span class="number">0</span> <span class="keyword">and</span> b%i==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">max</span>=i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The greatest common divisor of %d and %d is %d &#x27;</span>%(a,b,<span class="built_in">max</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The least common multiple of %d and %d is %d &#x27;</span>%(a,b,a*b/<span class="built_in">max</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#     *</span></span><br><span class="line"><span class="comment">#    **</span></span><br><span class="line"><span class="comment">#   ***</span></span><br><span class="line"><span class="comment">#  ****</span></span><br><span class="line"><span class="comment"># *****</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *</span></span><br><span class="line"><span class="comment"># **</span></span><br><span class="line"><span class="comment"># ***</span></span><br><span class="line"><span class="comment"># ****</span></span><br><span class="line"><span class="comment"># *****</span></span><br><span class="line"><span class="comment">#     *</span></span><br><span class="line"><span class="comment">#    ***</span></span><br><span class="line"><span class="comment">#   *****</span></span><br><span class="line"><span class="comment">#  *******</span></span><br><span class="line"><span class="comment"># *********</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,i-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,i-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,i-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,i,-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p><a name="D8uFB"></a></p><h3 id="循环经典案例">循环经典案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 说明：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，</span></span><br><span class="line"><span class="comment"># 该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3=153$。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    a=i%<span class="number">10</span></span><br><span class="line">    b=i//<span class="number">10</span>%<span class="number">10</span></span><br><span class="line">    c=(i-a-b*<span class="number">10</span>)/<span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> a**<span class="number">3</span>+b**<span class="number">3</span>+c**<span class="number">3</span>==i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正整数的反转</span></span><br><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;number is ：&#x27;</span>))</span><br><span class="line">reversed_number=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num&gt;<span class="number">0</span>:</span><br><span class="line">    reversed_number=reversed_number*<span class="number">10</span>+num%<span class="number">10</span></span><br><span class="line">    num//=<span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(reversed_number)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百钱白鸡问题</span></span><br><span class="line"><span class="comment"># 说明：百钱百鸡是我国古代数学家张丘建在《算经》一书中提出的数学问题：</span></span><br><span class="line"><span class="comment"># 鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</span></span><br><span class="line"><span class="comment"># 翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，</span></span><br><span class="line"><span class="comment"># 问公鸡、母鸡、小鸡各有多少只？</span></span><br><span class="line"><span class="comment"># 假设公鸡有x，母鸡有y，小鸡有z，满足数量关系和钱数关系</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">34</span>):</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">101</span>):</span><br><span class="line">            <span class="keyword">if</span> x+y+z==<span class="number">100</span> <span class="keyword">and</span> <span class="number">5</span>*x+<span class="number">3</span>*y+z/<span class="number">3</span>==<span class="number">100</span>:</span><br><span class="line">                <span class="built_in">print</span>(x,y,z)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CRAPS赌博游戏</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="comment"># 游戏初始化资金</span></span><br><span class="line">money=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;your property is &#x27;</span>))</span><br><span class="line">start=<span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> start:</span><br><span class="line">    start=<span class="literal">False</span></span><br><span class="line">    <span class="comment"># 设置赌资</span></span><br><span class="line">    debt=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;your debt chosen is ： &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> debt&gt;money <span class="keyword">or</span> debt&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 游戏开始</span></span><br><span class="line">    first=randint(<span class="number">1</span>,<span class="number">6</span>)+randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> first==<span class="number">7</span> <span class="keyword">or</span> first==<span class="number">11</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you win&#x27;</span>)</span><br><span class="line">        money+=debt    </span><br><span class="line">    <span class="keyword">elif</span> first==<span class="number">2</span> <span class="keyword">or</span> first==<span class="number">3</span> <span class="keyword">or</span> first==<span class="number">12</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the makers win,you lost&#x27;</span>)</span><br><span class="line">        money-=debt</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        go_on=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> go_on:</span><br><span class="line">            go_on=<span class="literal">False</span></span><br><span class="line">            num=randint(<span class="number">1</span>,<span class="number">6</span>)+randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="keyword">if</span> num==<span class="number">7</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;you lost&#x27;</span>)</span><br><span class="line">                money-=debt</span><br><span class="line">            <span class="keyword">elif</span> num==first:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;you win&#x27;</span>)</span><br><span class="line">                money+=debt</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                go_on=<span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;your property is now %d&#x27;</span>%(money))</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;please choose to go on(1) or give up(0) :&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">1</span> <span class="keyword">and</span> money!=<span class="number">0</span>:</span><br><span class="line">        start=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">0</span>:</span><br><span class="line">        start=<span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you can control yourself,you are worth to be learned by me,the maker of the game&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        start=<span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am sorry to tell you that you have lost yourself, be wise&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="JKKFU"></a></p><h3 id="循环习题">循环习题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出一百以内的素数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    counter=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i%j==<span class="number">0</span>:</span><br><span class="line">            counter+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> counter &lt;= <span class="number">2</span> <span class="keyword">and</span> i != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找出10000以内的完美数。</span></span><br><span class="line"><span class="comment"># 说明：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。</span></span><br><span class="line"><span class="comment"># 例如：6（$6=1+2+3$）和28（$28=1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        <span class="keyword">if</span> i%j==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">sum</span>+=j</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>==i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列的生成</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line">go_on = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> go_on:</span><br><span class="line">    go_on=<span class="literal">False</span></span><br><span class="line">    c=a+b</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    counter+=<span class="number">1</span></span><br><span class="line">    a,b=b,c</span><br><span class="line">    <span class="keyword">if</span> counter&lt;<span class="number">18</span>:</span><br><span class="line">        go_on=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        go_on=<span class="literal">False</span></span><br></pre></td></tr></table></figure><p><a name="keTHC"></a></p><h3 id="函数">函数:</h3><p>编程大师Martin Fowler先生曾经说过：“代码有很多种坏味道，重复是最坏的一种！”我们可以把那些重复的代码写成一个函数,来实现这个重复的功能，只需要调用输入参数即可，在python中函数的定义用def关键字来定义，函数也需要进行命名，其命名规则和变量的命名规则是一致的，其后面可以输入参数，就是数学里面的函数的自变量，在函数的最后需要用return这个关键字来进行返回值，下面用例子来进一步加深对该定义的理解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="comment"># 用def定义函数,fac是函数名,()里面是输入的参数</span></span><br><span class="line">    <span class="comment"># 求阶乘,m！</span></span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">        a*=i</span><br><span class="line">    <span class="comment">#用return来返回变量值 </span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">m=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;m=&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(fac(m))</span><br></pre></td></tr></table></figure><blockquote><p>在Python的Math库中有factorial这个求阶乘的函数,以后要用直接调用即可</p></blockquote><blockquote><p>在python中,如果一个函数要返回两个或者多个不同的值，可以采用返回元组，即return (a,b)，在调用函数时，直接a1,b1=function(),就会把return里面的a赋值给a1,b给b1</p></blockquote><ul><li>函数的参数: 在python中函数的参数有默认值也有可变参数,默认值是自己设计函数时定义的，而当自己输入值时，可以改为可变参数，当不输入任何参数时，默认使用函数定义的参数，即默认参数，不需要像其他语言一样支持函数的重载</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roll_dice</span>(<span class="params">n=<span class="number">2</span></span>):</span><br><span class="line">    num=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        num+=randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">roll_dice()  <span class="comment">#不带任何参数</span></span><br><span class="line">roll_dice(<span class="number">5</span>) <span class="comment">#输入参数5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">2</span>*b+<span class="number">3</span>*c</span><br><span class="line">add()  <span class="comment">#不带参数</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">#输入参数，分别对应 1 2 3  </span></span><br><span class="line">add(b=<span class="number">5</span>,c=<span class="number">2</span>,a=<span class="number">5</span>) <span class="comment"># 不按顺序输入参数取值</span></span><br></pre></td></tr></table></figure><ul><li>可变参数: 当设计函数时，不知道有多少个参数时，需要使用可变参数，在变量面前加<em>号，表示该参数是可变参数，加了</em>，表示多余的变量会被元组形式所接收，但若在变量之前加双**号，则是表示该变量会接受字典，下面用代码来说明:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*a</span>):  <span class="comment">#定义a是可变参数</span></span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><a name="ODmqq"></a></p><h3 id="用模块管理函数">用模块管理函数:</h3><p>由于python没有函数重载的概念，对于同名的函数，先后定义，后面函数会覆盖前面的函数，因此在不同的模块(一个文件就是一个模块，module)使用import载入该函数，例如在module1.py中定义foo函数，在module2.py中定义foo函数，from module1 import foo as m1和from module2 import foo as m2,分别执行是不会发生冲突的,或者直接import module1 as m1,再用m1.foo(),用点函数运算操作</p><blockquote><p>注: 若需要import的文件中含有可执行的代码，使用import时会运行该代码,有的时候我们不需要运行,可以把可执行代码放在if <strong>name</strong>='<strong>main</strong>:'语句后面，因为module有个隐藏的变量名叫做__name__,只有直接在该文件中运行时，<strong>name</strong>=<strong>main</strong>,然后才可以执行，而直接用import调用时,module的__name__时该module名，故if语句后面的可执行代码时不会运行的.</p></blockquote><p><a name="z1KF6"></a></p><h3 id="模块管理函数练习">模块管理函数练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="comment"># 求最大公因数</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; y:</span><br><span class="line">        x, y = y, x</span><br><span class="line">    factor = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span> <span class="keyword">and</span> y % i == <span class="number">0</span>:</span><br><span class="line">            factor = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> factor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scm</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="comment"># 求最小公倍数</span></span><br><span class="line">    a = gcd(x, y)</span><br><span class="line">    <span class="keyword">return</span> x*y/a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hws</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment"># 判断是否是回文数</span></span><br><span class="line">    temp=num</span><br><span class="line">    reversed_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> temp &gt; <span class="number">0</span>:</span><br><span class="line">        reversed_num = reversed_num*<span class="number">10</span>+temp % <span class="number">10</span></span><br><span class="line">        temp //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> num==reversed_num</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment"># 判断是否质数</span></span><br><span class="line">    counter=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> num==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 判断因子个数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> num%i==<span class="number">0</span>:</span><br><span class="line">                counter+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> counter&gt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;the number is &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> is_prime(num) <span class="keyword">and</span> hws(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d is a prime number and a palindromic number&#x27;</span>%(num))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;it isn\&#x27;t a prime number and a palindromic number&#x27;</span> )</span><br></pre></td></tr></table></figure><p><a name="H2t31"></a></p><h3 id="函数的作用域">函数的作用域</h3><p>函数搜寻变量会按照局部作用域,嵌套作用域,全局作用域，内置作用域的顺续来寻找变量，函数里面的变量是无法影响到函数之外的变量，函数里面的函数的变量是无法影响到外层函数的变量的，但是可以使用关键字global，nonlocal来使得嵌套作用域，局部作用域的变量升级位全局作用域，嵌套作用域。我们可以看到全局作用域的变量影响范围是非常大的，我们需要尽可能减少全局变量的使用，为此，以后代码尽可能像下面这样写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment">#     your code</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line">    <span class="comment">#pass 是一种空操作（null operation）</span></span><br><span class="line">    <span class="comment">#解释器执行到它的时候，除了检查语法是否合法，什么也不做就直接跳过。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>这样写主要是为了减少全局变量的使用，减少对其它代码的影响</p></blockquote><p><a name="Op5IB"></a></p><h3 id="数据结构">数据结构</h3><p>列表(list) 元组(tuple) 字典(dictionary) 集合(set)通常包括以上这几种数据结构(data structure),列表使用中括号[ ， ，]进行生成,元组用( ,  )进行生成，这里特别需要注意，如果这是一个空列表，mylist=(),但是如果列表只有一个元素，那么在那唯一一个元素之后需要加上逗号，以表示这是一个元组(tuple),例如,only_one_element_tuple=(‘a’, ),而字典是有键值对生成的，用大括号{},括起来的一个结构，{键值1:值1,键值2:值2,   },键值是唯一的，用不可变的量进行表示，而值是可变或者不可变的，都可以，更重要的是，这写数据结构是可以进行切片操作，或者叫做索引(indexing),下面会用例子进行进一步地解释这些structure</p><ul><li>字符串：把零个或者多个字符用单引号或者双引号括起来形成的，即形成了字符串，在字符串的输出中,可以利用转义符，+某些字母,\n,\t等等,\也可以加一些unicode字符来产生中文等,<a href="https://www.ifreesite.com/unicode-ascii-ansi.htm">https://www.ifreesite.com/unicode-ascii-ansi.htm</a>这个链接可以进行中文和Unicode字符互换,之外,若不想要\进行转义，可在字符串的最前端加上r或者R,字符串进行运算符操作,+可进行字符串的拼接,而*可以进行字符串的重复,*n即是重复n次，用in or not in 来进行bool运算,以及用[],或者[:]进行切片操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">b=<span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a+b) <span class="comment">#字符串的拼接</span></span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">2</span>+b*<span class="number">8</span>) <span class="comment">#字符串的重复</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;he&#x27;</span> <span class="keyword">in</span> a) <span class="comment">#字符串的属于与不属于关系</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">3</span>])  </span><br><span class="line"><span class="built_in">print</span>(a[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>除了运算符之外，字符串还可以进行函数操作，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;or&#x27;</span>)) <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;shit&#x27;</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;He&#x27;</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;hel&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line"><span class="built_in">print</span>(str1.endswith(<span class="string">&#x27;!&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.rjust(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isdigit())  <span class="comment"># False, is digit</span></span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalpha())  <span class="comment"># False, is alpha</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True， is alpha and number</span></span><br><span class="line">str3 = <span class="string">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右两侧空格之后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str3.strip())</span><br></pre></td></tr></table></figure><p>关于格式化输出，在python3.6之后，可以直接在字符串前面加f来进行输出，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line">b=<span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span>*<span class="subst">&#123;b&#125;</span>=<span class="subst">&#123;a*b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>列表 ：列表是结构化的,非标量类型，是值的有序序列，可以通过索引进行标识，定义列表可以用[]括起来，列表内元素用逗号隔开，可以使用for循环对列表进行遍历，也可以使用[],[:]取出列表中的一个或者多个元素，下面用代码演示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">    <span class="built_in">print</span>(list1)  <span class="comment"># 打印出list1的全部元素</span></span><br><span class="line">    list2 = [<span class="string">&#x27;hello&#x27;</span>]*<span class="number">3</span>  <span class="comment"># list2的元素重复3遍</span></span><br><span class="line">    <span class="built_in">print</span>(list2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(list2))  <span class="comment"># len返回list2的元素个数</span></span><br><span class="line">    <span class="comment"># 列表索引计算</span></span><br><span class="line">    <span class="built_in">print</span>(list1[<span class="number">0</span>])  <span class="comment"># 1</span></span><br><span class="line">    <span class="built_in">print</span>(list1[<span class="number">3</span>])  <span class="comment"># 5</span></span><br><span class="line">    <span class="built_in">print</span>(list1[-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(list1[-<span class="number">3</span>])</span><br><span class="line">    <span class="comment"># 利用索引进行替换</span></span><br><span class="line">    list1[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(list1)</span><br><span class="line">    <span class="comment"># 通过for循环用下标遍历元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">        <span class="built_in">print</span>(list1[i])</span><br><span class="line">    <span class="comment"># 还可以直接用for循环遍历列表元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="comment"># 同时，也还可以用enumerate函数把lis1列表的全部元素给遍历出来</span></span><br><span class="line">    <span class="keyword">for</span> i, ele <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):  <span class="comment"># enumerate(obj,start)enumerate里面是有两个参数</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="built_in">print</span>(i, ele)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>向列表中添加元素或者删除元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">89</span>]</span><br><span class="line"><span class="comment"># 向列表中添加元素，可以用append(向列表末尾追加元素)和insert(向指定索引位置插入元素)，</span></span><br><span class="line">list1.append(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 合并两个列表,可以用.extend(list) or 直接+list</span></span><br><span class="line">list2=list1+[<span class="number">789</span>,<span class="number">456</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list2))</span><br><span class="line"><span class="comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">789</span> <span class="keyword">in</span> list2:</span><br><span class="line">    list2.remove(<span class="number">789</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">256</span>  <span class="keyword">not</span> <span class="keyword">in</span> list2:</span><br><span class="line">    list2.append(<span class="number">256</span>)</span><br><span class="line"><span class="comment"># 从指定的位置删除元素,利用pop()函数</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line">list2.pop(<span class="number">0</span>)</span><br><span class="line">list2.pop(<span class="built_in">len</span>(list2)-<span class="number">1</span>) <span class="comment">#pop</span></span><br><span class="line"><span class="built_in">print</span>(list2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现列表的切片操作</span></span><br><span class="line">list1=[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;strawberry&#x27;</span>]</span><br><span class="line">list1+=[<span class="string">&#x27;watermelon&#x27;</span>,<span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">list2=<span class="built_in">sorted</span>(list1)</span><br><span class="line">list3=<span class="built_in">sorted</span>(list1,key=<span class="built_in">len</span>) <span class="comment">#按长度排序</span></span><br><span class="line">list4=<span class="built_in">sorted</span>(list1,reverse=<span class="literal">True</span>)  <span class="comment">#字母倒序</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br></pre></td></tr></table></figure><p>生成式和生成器: 列表可以使用生成式语法来产生(如下所示)，此外，还可以用yield将一个函数改为生成器函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">f=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)]  <span class="comment">#这是列表的生成式语法</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=[x+y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABCDE&#x27;</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12345&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f))  <span class="comment">#184</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=(x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>))  <span class="comment">#这是一个生成器,用小括号括起来，占用更少的内存资源</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f)) <span class="comment">#112</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 产生生成器函数的另一种方法，用yield关键字代替return进行声明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fb</span>(<span class="params">n</span>):</span><br><span class="line">    a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a,b=b,a+b</span><br><span class="line">        <span class="keyword">yield</span> a  <span class="comment">#这里用yield代替了return</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fb(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><ul><li>元组:元组也是一种容器数据类型，可以用一个变量来存储多个数据，但和列表不同的是，元组(tuple)是不能改变的，下面用代码演示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tp=(<span class="string">&#x27;t&#x27;</span>,<span class="number">2</span>,<span class="literal">True</span>,<span class="number">456</span>)</span><br><span class="line"><span class="built_in">print</span>(tp)</span><br><span class="line"><span class="built_in">print</span>(tp[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># tp[0]=2</span></span><br><span class="line"><span class="built_in">print</span>(tp[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 元组可以用list转化为列表</span></span><br><span class="line">lp=<span class="built_in">list</span>(tp)</span><br><span class="line"><span class="built_in">print</span>(lp)</span><br><span class="line"><span class="comment"># 列表也可以用tuple进行元组化</span></span><br><span class="line">tp=<span class="built_in">tuple</span>(lp)</span><br><span class="line"><span class="built_in">print</span>(tp)</span><br></pre></td></tr></table></figure><p>使用元组的优点:<br />元组中的元素是无法修改的，事实上我们在项目中尤其是多线程环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</p><ul><li>集合:set 用{}包含元素，用法可以见下面代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合生成语法,用大括号括起来</span></span><br><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the set\&#x27;s length is&#x27;</span>,<span class="built_in">len</span>(s1))</span><br><span class="line"><span class="comment"># 用set()函数转化成集合</span></span><br><span class="line">s2=<span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">s3=<span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(s2,s3)</span><br><span class="line"><span class="comment"># 用集合推导式生成集合</span></span><br><span class="line">s4=&#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">or</span> num%<span class="number">5</span>==<span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s4)</span><br><span class="line"><span class="comment"># 集合的添加与删除元素，remove删除一定存在的元素，discard包容性更强,也是删除元素</span></span><br><span class="line">s1.add(<span class="number">15</span>) <span class="comment">#加入元素</span></span><br><span class="line">s1.add(<span class="number">16</span>)</span><br><span class="line">s1.update([<span class="number">19</span>,<span class="number">15</span>]) <span class="comment">#对集合更新,()里面是需要更新的内容，若不存在，则添加，若存在，则跳过，可以是列表，也可以是集合,元组也ok</span></span><br><span class="line">s1.update(&#123;<span class="number">20</span>,<span class="number">15</span>&#125;)</span><br><span class="line">s1.update(<span class="built_in">tuple</span>(&#123;<span class="number">20</span>,<span class="number">18</span>&#125;))</span><br><span class="line"><span class="comment"># 当然集合也可以进行交并补差 &amp;交 |并 -差  ^对称差，&lt;=子集，包含于  &gt;= 包含</span></span><br></pre></td></tr></table></figure><ul><li>字典:dictionary :字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。字典是可以被更新的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典的字面量语法</span></span><br><span class="line">d1=&#123;<span class="string">&#x27;谭霖&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;张三&#x27;</span>:<span class="number">90</span>,<span class="string">&#x27;李四&#x27;</span>:<span class="number">89</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line">items1=<span class="built_in">dict</span>(one=<span class="number">1</span>,two=<span class="number">2</span>,three=<span class="number">3</span>) <span class="comment">#构造字典函数，dict()</span></span><br><span class="line"><span class="built_in">print</span>(items1)</span><br><span class="line"><span class="comment"># 创建字典的推导式语法</span></span><br><span class="line">d2=&#123;num:num**<span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(d2)</span><br><span class="line"><span class="comment"># 可以通过键获的字典的值value</span></span><br><span class="line"><span class="built_in">print</span>(d1[<span class="string">&#x27;谭霖&#x27;</span>])</span><br><span class="line">d1[<span class="string">&#x27;张三&#x27;</span>]=<span class="number">85</span></span><br><span class="line">d1[<span class="string">&#x27;李四&#x27;</span>]=<span class="number">98</span></span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line">d1.update(王五=<span class="number">79</span>,张九=<span class="number">88</span>)</span><br><span class="line"><span class="built_in">print</span>(d1.popitem()) <span class="comment">#清除某个字段</span></span><br><span class="line"><span class="built_in">print</span>(d1.pop(<span class="string">&#x27;王五&#x27;</span>))</span><br><span class="line">d1.clear() <span class="comment">#清空字典</span></span><br><span class="line"><span class="built_in">print</span>(d1)</span><br></pre></td></tr></table></figure><p><a name="WW7sB"></a></p><h3 id="数据结构练习">数据结构练习</h3><p><a name="GazpG"></a></p><h4 id="在屏幕上显示跑马灯文字">在屏幕上显示跑马灯文字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    content = <span class="string">&#x27;北京欢迎你，你的到来是我莫大的荣幸-------&#x27;</span></span><br><span class="line">    go_on = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> go_on:</span><br><span class="line">        <span class="comment"># 清理屏幕上的输出</span></span><br><span class="line">        os.system(<span class="string">&#x27;cls&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        <span class="comment"># 延迟0.2s</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        content = content[<span class="number">1</span>:]+content[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><a name="mrOa4"></a></p><h4 id="设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成">设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_coed</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    n : TYPE, optional</span></span><br><span class="line"><span class="string">        DESCRIPTION. The default is 4.</span></span><br><span class="line"><span class="string">    Returns 一个由数字和大小写字母组成验证码</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    None.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    choice=<span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">    num=<span class="built_in">len</span>(choice)</span><br><span class="line">    code=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        code+=choice[random.randint(<span class="number">1</span>,num)]</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"><span class="built_in">print</span>(generate_coed(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><a name="P52Ku"></a></p><h4 id="设计一个函数返回给定文件名的后缀名。">设计一个函数返回给定文件名的后缀名。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_suffix</span>(<span class="params">filename,has_dot=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    读取文件的后缀名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    filename : TYPE</span></span><br><span class="line"><span class="string">        DESCRIPTION. 文件名</span></span><br><span class="line"><span class="string">    has_dot : TYPE, optional</span></span><br><span class="line"><span class="string">        DESCRIPTION. The default is False.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns 文件的后缀名</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    pos=filename.find(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    num=<span class="built_in">len</span>(filename)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; pos &lt; num-<span class="number">1</span>:</span><br><span class="line">        index=pos <span class="keyword">if</span> has_dot <span class="keyword">else</span> pos+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> filename[index:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">get_suffix(<span class="string">&#x27;game.py&#x27;</span>)</span><br><span class="line">get_suffix(<span class="string">&#x27;game.py&#x27;</span>,has_dot=(<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p><a name="dt91n"></a></p><h4 id="设计一个函数返回传入的列表中最大和第二大的元素的值。">设计一个函数返回传入的列表中最大和第二大的元素的值。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_max_secmax</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    返回列表中最大和第二大的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    list : TYPE ：this is a list,and all of elements are numbers</span></span><br><span class="line"><span class="string">        DESCRIPTION.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns the greatest and second greatest numbers</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    num=<span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line">    largest=<span class="built_in">list</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">list</span>[i]&gt;=largest:</span><br><span class="line">            largest=<span class="built_in">list</span>[i]</span><br><span class="line">    list2=<span class="built_in">list</span>[:]</span><br><span class="line">    list2.remove(largest)</span><br><span class="line">    sec_largest=list2[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list2)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">list</span>[i]&gt;=sec_largest:</span><br><span class="line">            sec_largest=<span class="built_in">list</span>[i]</span><br><span class="line">    <span class="keyword">return</span> largest,sec_largest</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">get_max_secmax([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">911</span>,<span class="number">1500</span>])</span><br></pre></td></tr></table></figure><p><a name="Jj0yo"></a></p><h4 id="计算指定的年月日是这一年的第几天">计算指定的年月日是这一年的第几天</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="keyword">return</span> year%<span class="number">100</span>!=<span class="number">0</span> <span class="keyword">and</span> year%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">or</span> year %<span class="number">100</span>==<span class="number">0</span> <span class="keyword">and</span> year %<span class="number">400</span>==<span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_day</span>(<span class="params">year,month,day</span>):</span><br><span class="line">    days=[[<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>],[<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>]]</span><br><span class="line">    year_days=days[<span class="number">1</span>] <span class="keyword">if</span> is_leap_year <span class="keyword">else</span> days[<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">sum</span>+=year_days[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;这是<span class="subst">&#123;year&#125;</span>的第<span class="subst">&#123;<span class="built_in">sum</span>+day&#125;</span>天&#x27;</span>)</span><br><span class="line">return_day(<span class="number">2020</span>,<span class="number">5</span>,<span class="number">25</span>)</span><br><span class="line">return_day(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a name="U2RNF"></a></p><h4 id="杨辉三角">杨辉三角</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现杨辉三角</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yanghui</span>(<span class="params">n</span>):</span><br><span class="line">    lt=[[]]*n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        lt[row]=[<span class="literal">None</span>]*(row+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lt[row])):</span><br><span class="line">            <span class="keyword">if</span> col==<span class="number">0</span> <span class="keyword">or</span> col==row:</span><br><span class="line">                lt[row][col]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lt[row][col]=lt[row-<span class="number">1</span>][col-<span class="number">1</span>]+lt[row-<span class="number">1</span>][col]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x=<span class="built_in">str</span>(lt[i])</span><br><span class="line">        <span class="built_in">print</span>(x.center(n*<span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">yanghui(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><a name="Y8UT4"></a></p><h3 id="读取文件">读取文件</h3><ol><li>内键open()方法:open函数用open(filename,mode),其中mode包括以下几种类型:</li></ol><p>‘r’：只读  ’‘w’：新建,只写入 ,用一次就会覆盖之前的内容‘a’:可以添加数据到末尾    ‘r+’:打开文件可写，可读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a file</span></span><br><span class="line">file=<span class="built_in">open</span>(<span class="string">&#x27;file1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;my name is tanlin.&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;what\&#x27;s your name?&#x27;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read a file</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;file1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="comment">#注意，这里的mode是r</span></span><br><span class="line"><span class="comment">#show whole efile</span></span><br><span class="line"><span class="built_in">print</span>(file.read())</span><br><span class="line"><span class="comment">#show first ten characterrs</span></span><br><span class="line"><span class="built_in">print</span>(file.read(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#view by line</span></span><br><span class="line"><span class="built_in">print</span>(file.readline())</span><br><span class="line"><span class="comment">#view all by line</span></span><br><span class="line"><span class="built_in">print</span>(file.readlines())</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file=<span class="built_in">open</span>(<span class="string">&#x27;file1.txt&#x27;</span>,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>注：在进行完文件的操作后，要进行文件的关闭,file.close() ，由于很容易打开文件之后忘记关闭文件，所以最好用with方法，即with open(‘filename’,‘mode’) as f:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;file1.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;\nI am back again. \n&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;Do you miss me?\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;file1.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file.read())</span><br></pre></td></tr></table></figure><ol start="2"><li>文件路径:可以使用绝对路径，例如windows,open(‘C:\Users\user\Documents\file.txt’),但是字符串需要转义，所以\需要写两次<br><a name="kz3an"></a></li></ol><h2 id="Jupyter-Notebook">Jupyter Notebook</h2><p><a name="fgtYj"></a></p><h3 id="快捷键以及magic功能">快捷键以及magic功能</h3><p><a name="Z0itx"></a></p><h4 id="快捷键">快捷键</h4><ol><li>在单元格内，按shift+enter执行代码，并移至下一单元格，输入时，单元格四周为绿色，一个界面的代码对象可以共用，也就是上一个单元格的对象可以被下面单元格调用</li><li>notebook有自动保存功能，但也可以按快捷键ctrl+s进行保存</li><li>tab键:可以起到模糊查找的功能，输入对象的某几个字母后，按下tab键，字母后边会产生一个下拉框，可进行选择类的实例，函数，固定变量，实例的方法及属性内容，此外，tab还可以查找指定路径下的文件，在单元格内输入path=’ 绝对路径’，按下tab后，会产生文件名，但要注意的是，python中的路径是用,而notebook在用tab查找时，要用,但若在notebook执行代码需要用到路径，用\或/都是可以的。</li><li>单元格有两种编辑类型，一种是代码编辑类型，一种是markdown类型，按ctrl+M可以把代码编辑类型转为markdown类型</li><li>中断死循环代码运行可以用esc+i+i来进行<br><a name="obg7c"></a></li></ol><h4 id="魔法命令">魔法命令</h4><p>常用行魔法命令(%开头)</p><ol><li>%load source,source为指定路径下的python文件，输入%load source后，按下enter键，进行导入代码，该方法也可以导入网络上的代码，%load+网址/文件名</li><li>%run可以直接运行.py格式的python代码文件</li></ol><p>常用的单元魔法命令（%%开头）</p><ol><li>%%内核名，可以直接进行混合编程，%%latex进行latex代码编写，等等</li><li>%%time 测试单元格代码单次执行时间，并返回测试结果</li><li>%%timeit，测试单元格执行n次的平均时间<br><a name="EMVTI"></a></li></ol><h2 id="Package的学习">Package的学习</h2><p>主要学习数据处理，科学计算以及绘图的几个库，numpy，pandas，scipy,matplotlib<br><a name="rbWY1"></a></p><h3 id="Numpy-Numerical-Python">Numpy(Numerical Python)</h3><p>借助多维数组和相关的函数进行辅助的数据处理和计算，即numpy的核心是环绕ndarry(N维数组)和ufunc(universal function标准函数)两个类对象实现相关的计算功能。<br><a name="zTEQZ"></a></p><h4 id="array">array</h4><p>numpy的数组是一系列网格值，可以被一个非负整数组成的二维列表进行索引，利用shape可以返回每一个方向上的数组的大小一起组成的一个元组，初始化numpy的array用列表进行嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>],a[<span class="number">1</span>])</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 构建一个多维数组，不过需要用[]括起来，里面任然是一个列表</span></span><br><span class="line">b=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]])<span class="comment">#这只是二维数组</span></span><br><span class="line">c=np.array([[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]],[[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]]])</span><br><span class="line"><span class="built_in">print</span>(b.shape)</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>,<span class="number">0</span>],b[<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>注:</p><ol><li>数组维数快速识别，开始如为[[[（三个左中括号），则是三维数组，开始若为[[[[(四个左中括号)，则是四维数组</li><li>数维数时，从最里面往外面数，如[[[,最里面[为第一维，往左第二个[是第二维，最左边为第三维</li><li>数组可以表示数据的维度，也可以表示层级分类的类别数</li></ol><p>numpy中创建数组的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 构建一个1维数组</span></span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>],a[<span class="number">1</span>])</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 构建一个多维数组，不过需要用[]括起来，里面任然是一个列表</span></span><br><span class="line">b=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]])</span><br><span class="line"><span class="built_in">print</span>(b.shape)</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>,<span class="number">0</span>],b[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># numpy中创建数组的函数</span></span><br><span class="line"><span class="comment"># 创建全零矩阵</span></span><br><span class="line">a=np.zeros((<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 创建全1矩阵</span></span><br><span class="line">b=np.ones((<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 创建一个全是某个常数的数组</span></span><br><span class="line">c=np.full((<span class="number">3</span>,<span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 创建单位矩阵</span></span><br><span class="line">d=np.eye((<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 创建随机矩阵</span></span><br><span class="line">e=np.random.random((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># np.arange(start,end,step value)和np.linspace(start,end,num)</span></span><br><span class="line"><span class="comment"># 区别:arange那里是不会包括end值，linspace那里包括了end值</span></span><br><span class="line"><span class="comment">#linspace的步长由起始点，终点，和点的数量num决定，步长=(终点-起始点)/(num-1)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一些其他的函数:</p><ol><li>repeat():建立每个元素重复n次的函数，格式为repeat(a,repeats,axis=none),a为重复的数组,repeats为元素重复的个数，axis为数组重复的维度<br><a name="zPzXh"></a></li></ol><h5 id="数组对象的属性">数组对象的属性</h5><ol><li>ndim: 返回数组的维点</li><li>shape: 返回数组的形状</li><li>dtype: 返回数组元素的类型</li><li>size: 返回数组元素的总个数<br><a name="iSKG2"></a></li></ol><h5 id="数组对象的方法">数组对象的方法</h5><ol><li>reshape(x,y)方法:改变数组形状，但x*y等于被改变的数组的size</li><li>all()方法:判断数组的元素是否全为0，括号里面可以加axis=0或1，若axis=0，则是以列向看，axis=1，则是从行向看。但是它只适用于数字元素数组了。</li><li>any()方法:判断数组元素是否存在非零的，若有，则返回true，若全为0，则返回，和all()差不多</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b=a.reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c=b.<span class="built_in">all</span>(axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><ol start="4"><li>copy()方法: 若直接进行赋值，如b=a,只是把a的地址传给了b，若改变a或者b，另一个也会发生改变；但这里使用copy方法，则不会相互影响</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用赋值</span></span><br><span class="line">c=a</span><br><span class="line"><span class="built_in">print</span>(c,a)</span><br><span class="line">c[<span class="number">0</span>]=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(c,a)</span><br><span class="line"><span class="comment"># 使用copy方法</span></span><br><span class="line">c=a.copy()</span><br><span class="line">c[<span class="number">0</span>]=<span class="number">15</span></span><br><span class="line"><span class="built_in">print</span>(c,a)</span><br></pre></td></tr></table></figure><p>注: 数组的方法和属性的区别之一是，方法后面需要带一对括号，属性则不用<br><a name="Bceo2"></a></p><h4 id="数组索引">数组索引</h4><p>python提供了许多种索引的方式</p><ol><li>切片:类似于list的切片，但是array是multi—dimension的，必须为每一个维度指定一个切片</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">b=a[:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">b[<span class="number">0</span>,<span class="number">0</span>]=<span class="number">77</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 整数索引与切片索引相混合</span></span><br><span class="line">row_r1=a[<span class="number">1</span>,:]  <span class="comment">#这是一个array，但是shape是（4,）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(row_r1),row_r1,row_r1.shape)</span><br><span class="line">row_r2=a[<span class="number">1</span>:<span class="number">2</span>,:] <span class="comment">#这是一个array,但是shape是(1,4)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(row_r2),row_r2,row_r2.shape)</span><br><span class="line"><span class="comment"># 这种做法对column也是同样适用的</span></span><br></pre></td></tr></table></figure><ol start="2"><li>整数数组索引: 索引的两个维度里面都放数组，array进行索引时，会对数组分别一一对应进行查找,例如:a[[0,0],[1,5]]，其实查找的时a[0,1],a[0,5],利用这个可以访问一个数组里面的每一行(列)的任意一个数，放在一起形成一个array,见下面的例子</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"><span class="built_in">print</span>(a[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line"><span class="comment"># 若想找每行中的第2个数</span></span><br><span class="line"><span class="built_in">print</span>(a[np.arange(<span class="number">3</span>),np.full((<span class="number">1</span>,<span class="number">3</span>), <span class="number">1</span>)])</span><br><span class="line"><span class="comment"># 当然也可以进行计算</span></span><br><span class="line">a[np.arange(<span class="number">3</span>),np.full((<span class="number">1</span>,<span class="number">3</span>), <span class="number">1</span>)]+=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>3.布尔数组索引: 布尔数组索引通常可以挑选出我们想要的任何满足某种条件的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">a_index=a&gt;<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a_index) <span class="comment">#返回一个Boolean型的和a.shape一致大小的数组</span></span><br><span class="line"><span class="built_in">print</span>(a[a_index])</span><br></pre></td></tr></table></figure><p><a name="fizP1"></a></p><h4 id="数据类型-2">数据类型</h4><p>对于每一个array，numpy会自动产生一个数据类型，保持一致，当然也可以指定，在用np.array([] , dtype= )来自己认为设置<br><a name="hm1PW"></a></p><h4 id="numpy的四则运算，数学函数，以及数据操作">numpy的四则运算，数学函数，以及数据操作</h4><p>可以用下面的函数进行运算</p><table><thead><tr><th>np.add() or +</th><th>数组加法</th></tr></thead><tbody><tr><td>np.substract() or -</td><td>数组减法</td></tr><tr><td>np.multiply() or *</td><td>数组乘法(指对应元素相乘)</td></tr><tr><td>np.divide() or /</td><td>数组除法(指对应元素相除)</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>//</td><td>取整</td></tr><tr><td>np.sqrt()</td><td>对数组元素开根号</td></tr></tbody></table><p>更特别的，如果要进行线性代数(高等代数)中的矩阵的乘法，可以用dot函数，在numpy和标准库的array，模块里都有内积的dot函数,所以有两种写法，用a.dot(b)或者np.dot(x,y),这里的x，y是数组（矩阵），但是要符合高代里的矩阵乘法的条件<br />对于numpy里面的sum求和,对于不同的axis，求和的方式有所区别，axis=0,是对列求和;axis=1,是对行求和，而不设置axis，则是对所有的元素求和。<br /><br><img src='https://cdn.nlark.com/yuque/0/2023/jpeg/34812063/1673257834775-7053fb44-4c0f-42a4-acdf-3a2637b9d85b.jpeg'><br><a name="lQXTC"></a></p><h5 id="数学初等函数">数学初等函数</h5><ol><li>幂函数和指数函数</li></ol><p>$y=x^n$，其中x为底，n为指数，当x为自变量，n不变时，是幂函数；当x不变，n为自变量时，时指数函数。<br />以e为底的指数函数，用np.exp(),若括号里是一个值，则返回一个值;若括号里是一个数组，则返回一个数组;<br />以2为底的指数函数，用np.exp2(),返回值与上面类似</p><ol start="2"><li>对数函数</li></ol><p>以e为底的对数，np.log()<br />以10为底的对数,np.log10()<br />以2为底的对数,np.log2()<br />再介绍一种函数，比log(1+x)具有更高精度的计算能力，log1p()函数，虽然其等价于数学里的log(1+x),但在计算机计算里，能准确反映出x到1e-17，可见其精度之高</p><ol start="3"><li>三角函数与反三角函数</li></ol><p>常见的三角函数，比如np.sin(),np.cos(),np.tan()，np.arcsin(),np.arccos,np.arctan()<br><a name="bqVR9"></a></p><h5 id="随机函数">随机函数</h5><ol><li>random.rand(do,d1,d2,…,dn): 产生[0,1)范围内的浮点随机数，其中参数dn用于指定维度的长度</li><li>random.randn(do,d1,d2,…,dn): 产生标准正态分布随机数，其中参数dn用于指定维度的长度</li><li>random.randint(low,high,size):产生[low,high)范围内的整型随机数，其中size为产生数组的大小，一个整数就是元素个数且为一维，用元组表示为多维</li><li>random.normal(mu=0,sigma=1,size):产生正态分布随机数，mu是期望，sigma是标准差，size是数组大小(包括维数)</li><li>random.uniform(low,high,size): 产生指定范围[low,high)的均匀分布的随机数，size为数组大小，多维用元组表示</li><li>random.poisson(lam=1,size=none):产生泊松分布随机数，lam为期望</li><li>random.permutation(x)：产生一个乱序的随机数组。若x是一个标量时，则返回指定范围[0,x)的乱序数组；若x是一个可变集合（数组或者列表），则对集合中的值进行乱序排列</li><li>random.shuffle(x):直接对x数组进行乱序处理，但shuffle()并不会返回乱序后的数组，直接打印原数组即可，即是乱序后的数组</li><li>random.choice(a,size=None,replace=True,p=None):这是随机抽取a中size个元素，可以重复抽取，这里a是被抽取的数组或者列表，size是被抽取元素个数，replace是能否重复抽取，True是可以重复，False是不可重复，p=[x,y,z]是为a中每个元素赋被抽取的权重<br><a name="DSBBC"></a></li></ol><h5 id="统计函数">统计函数</h5><p><a name="nP0Q9"></a></p><h6 id="基础统计函数">基础统计函数</h6><p>为了下述函数的充分理解，先介绍axis(轴)参数的使用，在多维数组统计时，axis=0表示按列进行统计，axis=1表示按行进行统计(下面所有的函数前面加个nan，可以忽略数组中的空值)</p><ol><li>np.sum(a,axis=None) 求和函数，a是一个待求和的数组，axis不设置值时，求所有元素的和；axis=0时，求每一列的和；axis=1时，求每一行的和。而对于数组中由nan(空值存在时)，使用nansum进行求和，使用方法同sum</li><li>np.prod(a,axis=None) 求乘积函数，a是个待求乘积的数组，axis不设置值时，对所有元素求乘积；axis=0，对每一列求乘积；axis=1，对每一行求乘积。同理，nanprod(a,axis=None)针对由nan的数组</li><li>对于求最大值，最小值函数，np.max(a,axis=None),np.min(a,axis=None),累计求和函数np.cumsum(a,axis=None),累计求乘积函数np.cumprod(a,axis=None),平均值函数np.mean(a,axis=None),np.average(a,axis=None,weights=None,returned=False),a时待求数组，axis为轴参数，weights时为（行或列）每个元素的赋的权重，和为1，returned为False时，以数组返回，returned为True时，以元组返回；np.median(a,axis=None)也是求均值</li><li>np.var(),求方差，np.std() 求标准差，np.ptp(a,axis=None)求和或列的轴的最大值与最小值的差</li><li>np.percentile(a,p,axis=None):求一个统计样本沿指定轴的第p个百分位数，axis是轴参数</li><li>np.sort(a,axis=1):排序函数，其中a为需要统计的集合对象，axis=0，以列为单位进行升序排序;axis=1，以行为单位进行升序排列</li><li>np.around(a,decimals=0):四舍五入函数，decimals为保留的小数位数</li><li>np.floor(x) :取浮点数的整数部分</li><li>np.ceil(x):对x向上取值</li><li>np.rint(x):简单取最接近的整数</li><li>np.abs(x):绝对值函数</li><li>np.where(condition,x,y):条件比较函数，根据condition条件，选择x数组或者y数组里的元素，并以数组形式返回。当condition为true时，返回x中元素；若为false，返回y中元素</li></ol><p>官方数学函数文档<br />numpy除了可以进行数学运算之外，还可以进行reshape(重塑)和manipulate(操纵)数组，转置的话可以用T这个数组的attribute，即a.T就是对a进行transpose(转置),下面这个是对于函数操纵的官方文档<br><a name="tHp3r"></a></p><h5 id="数组操纵">数组操纵</h5><ol><li>vstack((x1,x2,x3)):将数组垂直方向上连接起来</li></ol><p>注:vstack连接的数组必须保持列数一致，且数组参数得用元组体现，数组参数个数不限</p><ol start="2"><li>hstack((x1,x2,x3)):将数组在水平方向上连接起来</li><li>vsplit(ar,N)：将数组在垂直方向上，进行水平分割，ar是要被分割的对象，而N是要被分成的块数</li><li>hsplit(ar,N)：将数组在水平方向上，进行垂直分割，ar是要被分割的对象，而N是要被分成的块数</li></ol><p>注：这里的堆叠和分割可以联系起来记，vstack和vsplit是相反的操作<br><a name="n5iQy"></a></p><h4 id="广播-broadcast">广播(broadcast)</h4><p>广播是numpy进行数值计算的一个特殊机制(mechanism)，对于形状(shape)相同的数组来说，进行数值运算自然没问题，但遇到一个小规模的数组与大规模的数组，会自动触发广播特性，在讨论之前，先看一个函数,np.tile(A,reps),其中reps可以是数字，也可以是元组，如果是数字，则默认是(1,d)这样的元组，tile是有瓷砖的意思，我们把数组A看做一块瓷砖，tuple的第一个数字是纵向平铺的个数，第二个数字是横向平铺的数字，看下图解析<br /><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/34812063/1673261054108-2f546dff-f463-4b54-a639-c668dda75272.jpeg" alt=""><br />广播对于操作的数组也是有局限性，他们需要满足更小的数组的一个维度是1，且剩余的其他维度与大数组应该保持一致，否则无法计算，广播其实就是把小数组用tile函数扩展成大数组的一样的shape才可以继续进行数值计算</p><p><a name="uJgq7"></a></p><h2 id="面向对象编程-先不学">面向对象编程(先不学)</h2><p><a name="Z3fGY"></a></p><h3 id="什么是面向对象编程？">什么是面向对象编程？</h3><blockquote><p>比较官方的说法是，“把一组数据结构和处理他们的方法组成对象(object),把具有相同行为的对象归纳为类(class)，通过封装(encapsulation)隐藏类中方法实现的细节,再通过继承(inheritance)实现类的特化(specialization)和泛化(generzlization),通过多态(polymorphism)实现类的动态分配”</p></blockquote><p>而比较通俗的说法是，面向对象编程是一种编程的理念,而按照这种编程理念，程序中的数据和操作数据的函数是一个逻辑上的整体，我们称之为“对象”，而我们解决问题的方式就是创建出需要的对象并向对象发出各种各样的消息，多个对象的协同工作最终可以让我们构造出复杂的系统来解决现实中的问题。<br><a name="ZLGtg"></a></p><h3 id="类和对象">类和对象</h3><p>类是对象的蓝图和模板，对象是类的实例,类是一个抽象的东西，而对象是一个具体的东西。在面向对象编程的世界中,一切皆为对象，对象都有属性(静态特征)和行为(动态特征),每个对象都是独一无二的,而且每个对象必定属于某一个类.<br><a name="cZ537"></a></p><h5 id="定义类和使用对象">定义类和使用对象</h5><p>在Python中，用关键字class来定义类，用函数来定义方法(动态特征)，下面用代码创建一个类和对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># __init__(self,xx ,yy)用来创建对象self的属性xx和yy，并进行绑定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"><span class="comment"># 用函数定义study方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, coursename</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在学习<span class="subst">&#123;coursename&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 用函数定义watch方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>只能观看小儿科电视剧&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>已经足够大了,可以观看岛国影片了,哈哈&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建学生对象并赋予名字和年龄</span></span><br><span class="line">    stu1 = Student(<span class="string">&#x27;谭霖&#x27;</span>, <span class="number">21</span>)</span><br><span class="line">    <span class="comment"># 为stu1建立study方法</span></span><br><span class="line">    stu1.study(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">    stu1.watch()</span><br><span class="line">    stu2 = Student(<span class="string">&#x27;宇宙&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">    stu2.study(<span class="string">&#x27;数学分析&#x27;</span>)</span><br><span class="line">    stu2.watch()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>字段(field)中包含类变量和实例变量，类变量是在class中定义的全局变量，对类中的每一个方法都有作业,是作用于类与对象的，而实例变量是作用于实例的，是实例所独有的,不会被共享</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">robot</span>:</span><br><span class="line">    <span class="comment"># population是一个类变量</span></span><br><span class="line">    population = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;initializing &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line">        robot.population += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">die</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> is being destroyed&#x27;</span>)</span><br><span class="line">        robot.population -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> robot.population == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> is the last robot&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;there are still <span class="subst">&#123;robot.population &#125;</span> robots&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;greetings, my master call me &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">how_many</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;we have <span class="subst">&#123;cls.population &#125;</span> robots&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">droid1 = robot(<span class="string">&quot;r2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(robot.population)</span><br><span class="line">droid1.say_hi()</span><br><span class="line">droid1.die()</span><br><span class="line">robot.how_many()</span><br></pre></td></tr></table></figure><p><a name="rqPry"></a></p><h5 id="访问可见性">访问可见性</h5><p>在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，一般来说，对象的方法是公开的，可以直接访问，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="built_in">print</span>(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>但是python并没有在语法上严格设置私密性，只不过是给属性换了一个名字而已，当知道命名的规则(_类名__私有属性)，仍然可以访问该私有属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    <span class="built_in">print</span>(test._Test__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="N4psU"></a></p><h3 id="面向对象的支柱">面向对象的支柱</h3><p>面向对象有三大支柱：封装，继承，和多态。<br><a name="LzpQA"></a></p><h5 id="封装-encapulation">封装(encapulation)</h5><p>封装就是尽可能地编程地细节给隐藏，只暴露出简单的编程接口。我们在类中定义的方法其实就是把数据和对数据的操作封装起来了，在我们创建了对象之后，只需要给对象发送一个消息（调用方法）就可以执行方法中的代码，也就是说我们只需要知道方法的名字和传入的参数（方法的外部视图），而不需要知道方法内部的实现细节（方法的内部视图）。<br><a name="FICzo"></a></p><h5 id="继承-inheritance">继承(inheritance)</h5><p>继承相当于对代码的重用，继承是在类之间实现类型于子类型的关系，把我们需要研究对象的特征分成公共特征或者独有特征，可以把公共特征设置为父类，独有特征设置为子类，子类可以继承父类的特征。父类发生变化，继承的子类同样也会变化，但子类变化不会影响父类<br><a name="tou5W"></a></p><h5 id="多态-polymorphism">多态(polymorphism)</h5><p>在任何情况下，如果父类希望，子类型可以被替代，可以看作子类型是父类的一个实例</p><p><a name="MNoaO"></a></p><h4 id="练习">练习</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,hour=<span class="number">0</span>,minute=<span class="number">0</span>,second=<span class="number">0</span></span>):</span><br><span class="line">        self._hour=hour</span><br><span class="line">        self._minute=minute</span><br><span class="line">        self._second=second</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self._second+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second==<span class="number">60</span>:</span><br><span class="line">            self._second=<span class="number">0</span></span><br><span class="line">            self._minute+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute==<span class="number">60</span>:</span><br><span class="line">                self.minute=<span class="number">0</span></span><br><span class="line">                self.hour+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.hour==<span class="number">24</span>:</span><br><span class="line">                    self.hour=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self._hour&#125;</span>:<span class="subst">&#123;self._minute&#125;</span>:<span class="subst">&#123;self._second&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tm=clock(<span class="number">5</span>,<span class="number">25</span>,<span class="number">56</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(tm.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        tm.run()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,y</span>):</span><br><span class="line">        self.x=x</span><br><span class="line">        self.y=y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_to</span>(<span class="params">self,x,y</span>):</span><br><span class="line">        self.x=x</span><br><span class="line">        self.y=y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_by</span>(<span class="params">self,dx,dy</span>):</span><br><span class="line">        self.x+=dx</span><br><span class="line">        self.y+=dy</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">self,other</span>):</span><br><span class="line">        dx=self.x-other.x</span><br><span class="line">        dy=self.y-other.y</span><br><span class="line">        <span class="keyword">return</span> sqrt(dx**<span class="number">2</span>+dy**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(%s,%s)&#x27;</span>%(<span class="built_in">str</span>(self.x),<span class="built_in">str</span>(self.y))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p1=point(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    p2=point(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(p1)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    p2.move_by(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    <span class="built_in">print</span>(p1.distance(p2))</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()       </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语法总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Schur补引理</title>
      <link href="/2023/04/05/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%9F%A9%E9%98%B5%E8%AE%BA/Schur%E8%A1%A5%E5%BC%95%E7%90%86/"/>
      <url>/2023/04/05/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%9F%A9%E9%98%B5%E8%AE%BA/Schur%E8%A1%A5%E5%BC%95%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>参考博文: <a href="https://blog.csdn.net/itnerd/article/details/83385817">https://blog.csdn.net/itnerd/article/details/83385817</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些别开生面的English</title>
      <link href="/2023/04/05/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/%E4%B8%80%E4%BA%9B%E5%88%AB%E5%BC%80%E7%94%9F%E9%9D%A2%E7%9A%84English/"/>
      <url>/2023/04/05/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/%E4%B8%80%E4%BA%9B%E5%88%AB%E5%BC%80%E7%94%9F%E9%9D%A2%E7%9A%84English/</url>
      
        <content type="html"><![CDATA[<ul><li>r.i.p.:网络上大部分解释是rest in peace形容人一路走好，在平静安宁的状态下休息，而我的好兄弟Juse形容的是rest in power,指的是提醒人们要永远奋斗自强，永远热情不息，非常positive的一番解释，而我的理解是偏佛系一点，在人们步履匆匆，充满干劲的生活中也要适当地停下脚步rest一下，因为成功固然重要，但沿途地风景也很美！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/2023/04/03/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/Machine%20Learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/03/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/Machine%20Learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1>机器学习简介</h1><p>    机器学习是数据科学中<strong>数据建模和分析</strong>的重要方法，是当前大数据分析的基础和主流工具，是通向深度学习和人工智能的必经之路。它是一门多领域交叉学科，研究计算机怎样<strong>模拟和实现人类的学习行为</strong>，以获取新的知识和技能。大多教材实践直接用python语言的编写的sklearn(scikit-learn)库，我们可以从sklearn库学习案例和思想，但自己通过编写一些简答的模型可以有利于加深对原理的认识。<br>    人工智能，机器学习，深度学习三者之间的关系:深度学习是机器学习的分支，机器学习是人工智能的分支。<br>    统计学习、机器学习的区别和联系:统计学习是计算机基于数据构建概率统计模型，并运用模型对数据进行预测和分析的一门学科。统计学习又被称作统计机器学习(statistical machine learning),是机器学习的理论基础；而机器学习是统计学习对实践技术的延申，偏重于解决中小量数据的问题。</p><h2 id="学习资源">学习资源</h2><blockquote><p><a href='https://scikit-learn.org/stable/'>机器学习sklearn学习官网 </a>,可以点击进行学习案例</p></blockquote><blockquote><p>我学习的b站课程:<a href="https://www.bilibili.com/video/BV1Nb4y1s7nV/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=ea4737a919763490cc5572e8499dad37">https://www.bilibili.com/video/BV1Nb4y1s7nV/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=ea4737a919763490cc5572e8499dad37</a></p></blockquote><blockquote><p>推荐教材,如下图：<br>教材图</p></blockquote><blockquote><p>推荐网课,如下图：<br>网课图</p></blockquote><h1>机器学习绪论</h1><h2 id="机器学习定义">机器学习定义</h2><p>    一个计算机程序利用经验E来学习任务T，性能是P，如果性能P能随着经验E的增长而发生增长</p><h1></h1>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell+git+GitHub基础</title>
      <link href="/2023/04/03/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/shell%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/03/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/shell%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><pre><code>写这篇博客纯粹是巧合。因为在逛b站的时候，无意间看到了浙江大学计算机学院&quot;朋辈拾遗&quot;活动，里面讲述了一些常用的计算机基础工具，其中包括shell，git以及GitHub。因为博客的搭建需要用到Github仓库，所以我觉得我得学习一下这些基本的计算机基本命令(尤其是git和GitHub)，好了，就不多说了。</code></pre><h1>What is Shell?Terminal?</h1><ol><li>terminal?<br>(1)也叫做Terminal Emulator,模拟传统终端的行为<br>(2)其实它是一个应用程序，提供一个窗口，和输入输出交互的功能<br>(3)内部就是在运行shell，得到输出的结果<br>esp:我们windows系统的terminal就用windows terminal(推荐)<br><a href="">windows terminal图片</a></li><li>shell?<br>(1)是壳层，是用户与系统内核交互的界面<br>(2)也是一个程序，负责接受命令，工作然后交给内核来执行，并返回处理输出<br>二者之间的关系，也就是，terminal用来与用户进行交互，接受用户输入的命令，然后转交给shell，shell收到命令后，调用内核，进行处理，得到处理结果再返还给terminal，进行界面的显示</li><li>ctrl+c是复制还是中断程序，是靠terminal本身来决定的，与shell无关。比如，在一般的文本界面上，ctrl+c就是复制，而在python或者matlab等解释性语言上，ctrl+c一般会绑定为中止程序的运行。</li><li>理论上，命令行可以控制计算机上的一切，不需要鼠标进行操作，甚至可以在命令行中查看网页。</li></ol><h1>Basic Shell commands</h1><ol><li>路径意识:最重要的知道当前路径，也就是工作路径；可以输入pwd来获取当前路径；windows下，路径分隔符是用\ (右划线);此外还有是否是管理员权限;Windows下有多个根目录，如我们常说的C盘:C:, D盘:D:<br><a href="%E8%B7%AF%E5%BE%84">pwd</a></li><li>路径相关命令:获取当前路径就是之前提的pwd，可以用cd来切换路径，cd path 切换到path路径<br>注:(1):Path可以是相对路径，也可以是绝对路径<br>(2):cd ~ 切换到home路径(根路径)；cd . 当前路径  cd … ：切换到上一级路径</li><li>文件/目录操作命令:<br>(1)ls:列出当前路径下的文件和目录，或者用Get-Children<br>(2)ni file:创建一个文件夹<br>(3)rd file：删除一个文件夹<br>(4)copy-item：复制 文件地址 另一个地址 ：cp a.txt \home\user;复制多个文件(用空格隔开):cp a.txt b.txt 地址<br>(5)cp -r:将整个目录的东西复制到另一个目录<br>(6)get-item+文件名:展示文件信息<br>(7)new-item+文件名:新建文件<br>(8)md+目录名 ：新建目录(文件夹)<br>(9)mi+文件名+新目录：把文件移动到新目录下<br>(10)rename-item+原文件名+新文件名:改名字<br>(11)remove-item+目录/原文件名 删除目录内的文件</li><li>获取所有的shell命令:Get Command(gcm)</li><li>查询帮助指令:Get-Help 命令</li><li>清屏：cls 或者Clear-Host</li><li>中断进程：kill</li></ol><h1>后续</h1><pre><code>后面，自己有接触到shell命令，会再次进行更新，这次的话先到这！发现网络上大部分的shell命令都是在linux系统下的命令，自己每次得去查对应的windows下的命令，还是挺麻烦的。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 语法总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凸函数的四大基础定义及其等价证明</title>
      <link href="/2023/03/31/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%87%B8%E5%88%86%E6%9E%90/%E5%87%B8%E5%87%BD%E6%95%B0%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%85%B6%E7%AD%89%E4%BB%B7%E8%AF%81%E6%98%8E/"/>
      <url>/2023/03/31/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%87%B8%E5%88%86%E6%9E%90/%E5%87%B8%E5%87%BD%E6%95%B0%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%85%B6%E7%AD%89%E4%BB%B7%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><p>    我非常记得罗翔老师说过一句话，“我们登上并非我们所选择的舞台，演绎并非我们所选择的剧本，但是没有谁的剧本值得羡慕，我们唯一能做的就是尽力演好自己的角色，打好自己手中的牌”。 我们所作的每一个选择都可看做是一个优化问题中的一次迭代，在一次一次迭代过程中趋向我们人生的最优值。无论是学生时代通过各种手段，努力来得到我们想要的分数，去到我们想要去的学校，又或是长大成人之后，面临生活中的一地鸡毛，都能运筹帷幄，得尝所愿。但正是我们的人生函数是非凸的，未必拥有最优解，所以我们的人生才变得多姿多彩，五颜六色，当我们面临低谷时，就像陷入了局部解，走出低谷的关键就是能否正视它，即跳出这个困境，再次走上新的征程，继续去寻找我们的最优解。那么为什么我们的人生函数是凸的时候，就会变得单调呢？亦或我们可以通过了解凸函数可以为我们的非凸函数带来什么经验呢？这正是我们这一小节的重要性！</p><h1>文章进度</h1><ul><li>给出凸函数四个等价定义($\surd$)</li><li>对四个定义进行等价证明($\surd$)</li><li>增加梯度单调性描述函数的凸性并证明与定义2($Def2$)等价()</li><li>补充文内图片()</li></ul><h1>凸函数定义</h1><p>    为了给出凸函数的最基础的定义，我们可以先给出它的最经典三维图像例子-锅<del>对，你没看错，就是我们生火做饭的大铁锅</del>，来产生最直接的感受。亦或是我们从初中就开始接触的函数-二次项系数为正数的二次函数。它们都是我们接下来所要讨论的凸函数。在有了最基本的直观印象后，给出它最基础的定义吗，如Def 1所示。</p><blockquote><p>$Def 1$:假定$f:R^n\longmapsto R$,$f$的定义域$dom f\subseteq R^n$是一个凸集，若对于$\forall x,y\in domf$,$\forall \theta \in [0,1]$都有:<br>$\begin{equation}<br>f(\theta x+(1-\theta)y)\leqslant \theta f(x)+(1-\theta)f(y)<br>\end{equation}$<br>,则$f(x)$是一个凸函数。</p></blockquote><ul><li><p>注1:若在(1)中，符号为$\geqslant$,即:<br>$\begin{equation}<br>f(\theta x+(1-\theta)y)\geqslant \theta f(x)+(1-\theta)f(y)<br>\end{equation}$,则$f(x)$是一个凹函数。$f(x)$是凹函数的最原始的定义为$-f(x)$是凸函数，所以即使$f(x)$是一个凹函数，它的定义域也是一个凸集。若定义域非凸的话，这个函数纵使满足不等式也不是凸或者凹函数。</p></li><li><p>注2:我们除了凸和凹之外，还会有严格凸与严格凹的定义，只需要在不等式(1)(2)中使得不等式严格成立即可，即不会有相等的情形。</p></li><li><p>注3:我们在这给出一维凸函数的几何上的解释,由(1)式的左端，表示的是$[x,y]$直线上的点在函数上的取值，而(1)的右端表示的是以$(x,f(x))$,$(y,f(y))$为端点的线段的取值，(1)中的不等式表明凸函数的任意两点图像必然会低于(至多与该线段相等)端点构成的线段。</p></li></ul><blockquote><p>$Def 2$: 假定$f:R^n\longmapsto R$,$f$的定义域$dom f\subseteq R^n$是一个凸集，若对于任意的与$f(x)$的定义域相交的直线上$f(x)$都是凸的,则$f(x)$在$dom f$上是凸函数。用代数语言来表示即为:若对于$\forall x \in R^n$，以及任意的方向向量$v$,函数$g(t)=f(x+tv)$都是凸函数，且$dom g={ t|x+tv\in domf }$.</p></blockquote><ul><li>注1:上述定义2可以把高维定义域的凸函数当作一维的凸函数来处理，就像是切西瓜一样，从一个点出发，沿着它的任意一个方向切下去，它仍然会是一个锅一样的形状，这个定义对于证明定义1的剩余2个等价定义是非常有用的。</li></ul><p>    对于前面给出的两个定义对于函数的凸性并没有做任何假定，即是&quot;原汁原味&quot;的，只需要考虑函数值之间的关系，从最开始的图像出发，但是当函数是在开集定义域上是可微的或者二阶可微的时候，有更加简洁的判断条件，分别叫做一阶条件、二阶条件。</p><blockquote><p>$Def 3$(一阶条件):假定$f:R^n\longmapsto R$,$f$的定义域$dom f\subseteq R^n$是一个开集，函数$f(x)$在$dom f$是可微的，即在$dom f$的任意一点 $x$处存在梯度$\nabla f(x)$，$f(x)$是凸函数的充分必要条件是对于$dom f$上的任意$x,y$,都有<br>$\begin{align}<br>f(y)\geqslant f(x)+\nabla f(x)^T(y-x).<br>\end{align}$</p></blockquote><ul><li>注1：一阶条件可以看成是把函数$f(x)$进行一阶近似(即对其进行$Taylor$展开，只保留一阶信息)，正是由于凸性的存在，使得函数$f(x)$的最优性条件只需要找到一个$x’$,使得<br>$$<br>\begin{equation}<br>\nabla f(x’)=0,<br>\end{equation}<br>$$<br>成立即可</li></ul><blockquote><p>$Def 4$(二阶条件):假定$f:R^n\longmapsto R$,$f$的定义域$dom f\subseteq R^n$是一个开集，函数$f(x)$在$dom f$是二阶可微的，即在定义域内任何一点$x$都存在$Hessian$矩阵$\nabla^2f(x)$,则函数$f(x)$是凸函数的充要条件是对于$\forall x \in domf$,有<br>$\begin{equation}<br>\nabla^2 f(x)\succcurlyeq0.<br>\end{equation}<br>$</p></blockquote><ul><li><p>注1:二阶条件的给出对于判断一个函数是否是凸函数起了很重要的作用，即看他的$Hessian$矩阵是否是半正定的，(5)中的符号$\succcurlyeq$是广义不等式，在矩阵中一般表示半正定的意思。</p></li><li><p>注2:我们在Def1中的注2中给出了严格凸的简要定义(符号定义)，对于二阶条件来说，也存在判断函数严格凸的充分条件，即<br>$\begin{align}<br>\nabla^2 f(x)\succ0，<br>\end{align}$但这只是一个充分条件，一般来说不是充要条件，比如函数$f(x)=x^4$是严格凸的，但是在$x=0$的时候，$\nabla^2f(x)|<em>{x=0}=12x^2|</em>{x=0}=0$,其不是在任意一点都是严格大于0的。</p></li></ul><h1>凸函数定义等价证明</h1><h2 id="Def-1-与-Def-2-的等价证明">$Def 1$与$Def 2$的等价证明</h2><p>证明:$Def 1 \implies Def2$:</p><p>分析:要证明$Def2$,即证明函数$g(t)$是凸的，要证(1) $domg$是凸集 (2) $g(\theta t_1+(1-\theta)t_2)\leq \theta g(t_1)+(1-\theta)g(t_2).$</p><p>对于任意的$\theta\in [0,1]$,任意$x \in domf$,$t_1,t_2 \in domg$,以及任意的方向向量$v$,由$dom g$的定义可知，$x+t_1v$,$x+t_2v$都属于$domf$,又$domf$是凸集，则:<br>$$<br>\begin{equation}<br>\begin{split}<br>\theta(x+t_1v)+(1-\theta)(x+t_2v)=x+(\theta t_1+(1-\theta)t_2)v\in domf,<br>\end{split}<br>\end{equation}<br>$$<br>故由$(7)$可得，$dom g$是凸集.</p><p>由函数$g(t)$的定义可知，$x+t_1v,x+t_2v \in domf$,且函数$f(x)$是凸函数，则:<br>$$\begin{equation}<br>\begin{split}<br>g(\theta t_1+(1-\theta) t_2))&amp;=f(x+(\theta t_1+(1-\theta) t_2) v)\&amp;=f(\theta(x+t_1 v)+(1-\theta)(x+t_2 v))\&amp;\leqslant \theta f(x+t_1 v)+(1-\theta)f(x+t_2 v)\&amp;=\theta g(t_1)+(1-\theta)g(t_2),<br>\end{split}<br>\end{equation}<br>$$<br>则由$(8)$,且结合凸函数$Def1$,我们知道$g(t)$是凸函数。</p><p>$Def 2 \implies Def1$:</p><p>要证函数$f(x)$是凸函数，过程与前面类似.先假定任意的$x_1,x_2\in domf$,我们在$domf$内肯定可以找到一个$x$,与方向向量$v$,使得存在$t_1,t_2\in domg$,有$x_1=x+t_1v,x_2=x+t_2v$,则对于任意的$\theta\in[0,1]$,由$dom g$是凸集，则由$\theta t_1+(1-\theta)t_2\in domg\implies x+(\theta t_1+(1-\theta)t_2)v\in domf $,故<br>$$<br>\begin{equation}<br>\begin{split}<br>\theta x_1+(1-\theta)x_2=x+(\theta t_1+(1-\theta)t_2)v\in domf,<br>\end{split}<br>\end{equation}<br>$$<br>故由$(9)$可得，$domf$是凸集。</p><p>由前面的假定可知,<br>$$\begin{equation}<br>\begin{split}<br>f(\theta x_1+(1-\theta) x_2))&amp;=f(x+(\theta t_1+(1-\theta) t_2) v)\&amp;=g(\theta t_1+(1-\theta t_2 )\&amp;\leqslant \theta g(t_1)+(1-\theta)g(t_2)\&amp;=\theta f(x+t_1v)+(1-\theta)g(x+t_2v)\&amp;=\theta f(x_1)+(1-\theta)f(x_2),<br>\end{split}<br>\end{equation}<br>$$<br>则由$(10)$,我们知道$f(x)$是凸函数。</p><h2 id="Def-1-与-Def-3-的等价证明">$Def 1$与$Def 3$的等价证明</h2><p>证明:我们先考虑特殊的情形，当$f:\R \rightarrow \R $时,证明 $Def 1 \implies Def3$.</p><p>我们选取$\forall t\in (0,1]$,$\forall x,y\in dom f$,由$Def 1$可得,$f(tx+(1-t)y)\leq tf(x)+(1-t)f(y)$,我们重新组合左边不等式的顺序便有:<br>$$\begin{equation}<br>\begin{split}<br>&amp;tf(x)\geq tf(y)-f(y) +f(tx+(1-t)y),<br>\end{split}<br>\end{equation}<br>$$<br>两边同时除以非负的t,有下式成立:<br>$$\begin{equation}<br>\begin{split}<br>&amp;f(x)\geq f(y) + \frac{f(tx+(1-t)y)-f(y)}{t}<br>\end{split}<br>\end{equation}<br>$$<br>再令$t\rightarrow0$,由极限的保序性，便得到下式成立:<br>$$\begin{equation}<br>\begin{split}<br>f(x)\geq f(y) + f’(y)(x-y)<br>\end{split}<br>\end{equation}<br>$$<br>我们当$f:\R \rightarrow \R $时,证明 $Def 3 \implies Def 1$.</p><p>对于$\forall x,y\in dom f$,$\forall \theta \in [0,1]$,我们令$z=\theta x + (1- \theta)y$,由$Def3$知道,<br>$$\begin{equation}<br>\begin{split}<br>f(x)&amp;\geq f(z) + f’(z)(x-z)\&amp;=f(z) + f’(z)(1- \theta)(x-y),<br>\end{split}<br>\end{equation}<br>$$<br>$$\begin{equation}<br>\begin{split}<br>f(y)&amp;\geq f(z) + f’(z)(y-z)\&amp;=f(z) + f’(z)\theta(y-x),<br>\end{split}<br>\end{equation}<br>$$<br>观察(14)(15)这两个式子，容易看出(14)左右两边乘以$\theta$加上(15)左右两边乘以$(1-\theta)$，便可得:<br>$$\begin{equation}<br>\begin{split}<br>\theta f(x)+ (1-\theta)f(y)&amp;\geq f(z) + f’(z)\theta(1-\theta)(y-x)+f’(z)\theta(1- \theta)(x-y)\&amp;=f(z)\&amp;=f(\theta x + (1- \theta)y)<br>\end{split}<br>\end{equation}<br>$$</p><p>至此，我们已经证明了在$f:\R \rightarrow \R $时，$Def1$与$Def3$的等价性。下面考虑一般情况，当$f:\R^n \rightarrow \R $时，先证明$Def1$ $\implies$ $Def3$.</p><p>同前,我们还是任意选取$x,y \in domf$,利用$Def2$,对于任意的$t\in domg$,有$g(t)=f(y+t(x-y))$成立.由于$f(x)$是凸函数，则$g(t)$也是凸函数.而$g:domg\subseteq \R\rightarrow \R $故由前面证明的特殊情况可知，我们取$t_1=1$,$t_2=0$,便有:$g’(1) \geq g(0)+g’(0)$ $\implies$ $f(x) \geq f(y)+\nabla f(y)(x-y) $.</p><p>反过来，我们证明$Def3$ $\implies$ $Def1$.</p><p>对于$\forall x,y \in domf $,考虑$Def2$,对于$\forall t_1,t_2 \in domg$,由于$domg$的定义，则$t_1x+(1-t_1)y,t_2x+(1-t_2)y\in domf$,我们利用$Def3$,有下式成立:<br>$$\begin{equation}<br>\begin{split}<br>f(t_1x+(1-t_1)y) \geq f(t_2x+(1-t_2)y)+\nabla f(t_2x+(1-t_2)y)(t_1x+(1-t_1)y-t_2x+(1-t_2)y)<br>\end{split}<br>\end{equation}<br>$$</p><p>我们仍然利用$Def2$假设$g(t)=f(y+t(x-y))$,则由(17)我们可以得到:<br>$$\begin{equation}<br>\begin{split}<br>g(t_1) \geq g(t_2)+g’(t_2)(t_1-t_2),<br>\end{split}<br>\end{equation}<br>$$</p><p>则我们可以推出$g(t)$是凸的，从而$f(x)$是凸的.</p><h2 id="Def-1-与-Def-4-的等价证明">$Def 1$与$Def 4$的等价证明</h2><p>证明:我们先考虑特殊的情形，当$f:\R \rightarrow \R $时,证明 $Def 1 \implies Def4$.</p><p>我们任意选取$x,y \in domf $,且$x&gt;y$,则由$Def3$,我们由下式成立:<br>$$\begin{equation}<br>\begin{split}<br>f’(y)(x-y) \leq f(x)-f(y) \leq f’(x)(x-y),<br>\end{split}<br>\end{equation}<br>$$<br>我们只考虑$(19)$两边,同时除以$x-y$，得下式:<br>$$\begin{equation}<br>\begin{split}<br>f’(y) \leq  f’(x),<br>\end{split}<br>\end{equation}<br>$$<br>再右边移到左边，同时除以$y-x$,令$y \rightarrow x$，则有下式:<br>$$\begin{equation}<br>\begin{split}<br>f^{‘’}(x) \geq 0<br>\end{split}<br>\end{equation}<br>$$</p><p>反过来，我们考虑证明当$f:\R \rightarrow \R $时,证明 $Def 4 \implies Def1$.</p><p>我们选择$\forall z \in domf$,则由$Def4$，我们知道$f’‘(z) \geq0$.再任意选取$x,y \in domf$,且满足$y \geq x$,则有下列积分式子成立:<br>$$\begin{equation}<br>\begin{split}<br>0\leq \int_x^y f^{’‘}(z)(y-z)dz,<br>\end{split}<br>\end{equation}<br>$$<br>再由微积分基本定理，得下式:<br>$$\begin{equation}<br>\begin{split}<br>0\leq \int_x^y f^{’‘}(z)(y-z)dz=f(y)-f(x)-f’(x)(y-x),<br>\end{split}<br>\end{equation}<br>$$<br>观察$(23)$两端，即可得到:<br>$$\begin{equation}<br>\begin{split}<br>f(y) \geq f(x)+f’(x)(y-x),<br>\end{split}<br>\end{equation}<br>$$<br>故由$Def3$,可知$f(x)$是凸的,自然可以推出$Def1$.<br>至此特殊情形证明完毕。</p><p>我们在考虑一般情形，当$f:\R^n \rightarrow \R $时,证明 $Def 4 \implies Def1$.</p><p>对于$\forall z \in domf$,由$Def4$可得,$\nabla^2f(z)\succeq0 $.面对高维情形，我们仍然考虑$Def2$，转换为特殊情形。任意选取$x,y \in domf$,$t\in domg$,有$g(t)=f(x+t(y-x))$,由于$f$是二阶可微的，则对$g(t)$求二阶导数,有<br>$$\begin{equation}<br>\begin{split}<br>g^{‘’}(t)=(y-x)^T\nabla^2f(x+t(y-x))(y-x),<br>\end{split}<br>\end{equation}<br>$$<br>由于$\nabla^2f(x+t(y-x))\succeq0$,则由半正定矩阵的定义，有$g’'(t) \geq 0$,则$g(t)$是凸的，自然可以推导出$Def1$.</p><p>反过来，当$Def1$成立时，同样转为一维情形，我们令$(25)$中，$z=x+t(y-x)$,易知道对于$\forall x,y \in domf$,且$x \neq y$,我们可以得到$(y-x)^T\nabla^2f(z)(y-x)\geq 0$的，则由半正定矩阵的定义，我们知道$\nabla^2f(z)\succeq0$,故$Def4$成立。</p><h1>参考资料</h1><blockquote><ol><li>Boyd S, Boyd S P, Vandenberghe L. Convex optimization[M]. Cambridge university press, 2004.</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 凸优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凸优化 </tag>
            
            <tag> 数学分析 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移</title>
      <link href="/2023/03/31/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2023/03/31/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><p>  时隔这么久，再次记起了我还有个博客，哈哈!主要是今天正好从学校回到家，可以再次打开我的旧电脑，正好可以把我之前的搭建的博客的环境以及一些配置给迁移到我的新电脑上来，我这么久没写博客主要是新电脑上没有去配置过来，所以就没有了敲字的欲望。但这次在机缘巧合之下，我心血来潮，就去搜索了一下教程，网上的方法还挺多，但对于我来说也不是都有用(起码一开始我就没成功)，所以我就想把我博客转移的方法记录下来。</p><h1>参考博文</h1><blockquote><ol><li><a href="https://blog.csdn.net/weixin_42456056/article/details/108010568?spm=1001.2101.3001.6650.10&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-10-108010568-blog-105105705.235%5Ev27%5Epc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-10-108010568-blog-105105705.235%5Ev27%5Epc_relevant_recovery_v2&amp;utm_relevant_index=11">直接复制全部文件操作(简单暴力版)</a></li><li><a href="https://blog.csdn.net/weixin_45019478/article/details/107599437?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-107599437-blog-105105705.235%5Ev27%5Epc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-107599437-blog-105105705.235%5Ev27%5Epc_relevant_recovery_v2&amp;utm_relevant_index=1">复制一部分文件，再进行操作(进阶版)</a></li></ol></blockquote><h1>迁移方法</h1><ol><li>下载node.js与git(下载可以直接搜索node.js与git的官网进行下载) <del>我相信你都进行博客的迁移了，这个不可能不会下载吧 </del></li><li>把之前的全部文件直接复制粘贴到新的电脑上，存储在一个新的文件夹下(哪里都可以，只要你记得住就行，后面需要进入)</li><li>在gitbash界面输入下面代码之一，安装git部署工具</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo  # 安装hexo</span><br><span class="line">npm install hexo-cli -g  #安装deployer</span><br><span class="line">或者 npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="4"><li>在gitbash上进入之前新建的文件夹,<a href="https://www.cnblogs.com/alice-cj/p/10401395.html#:~:text=1.%E6%89%93%E5%BC%80git%20bash%E7%95%8C%E9%9D%A2%E5%90%8E%EF%BC%8C%E8%BF%9B%E5%85%A5%E6%9F%90%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%97%B6%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8cd%20%E5%91%BD%E4%BB%A4%EF%BC%8Ccd%E6%97%B6change,directory%E7%9A%84%E7%AE%80%E5%86%99%EF%BC%8C%E8%A1%A8%E7%A4%BA%E6%94%B9%E5%8F%98%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%AF%94%E5%A6%82%EF%BC%8C%E6%83%B3%E5%88%87%E6%8D%A2%E5%88%B0%E6%9F%90%E4%B8%AA%E7%9B%98%E7%AC%A6%E4%B8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8cd%20g%3A%EF%BC%8C%E5%88%99%E4%BC%9A%E8%BF%9B%E5%85%A5%E5%88%B0g%E7%9B%98%E8%B7%AF%E5%BE%84%E4%B8%8B%EF%BC%8C%E5%BD%93%E6%83%B3%E5%88%87%E6%8D%A2%E5%88%B0%E5%85%B7%E4%BD%93%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5cd%20fileName%EF%BC%8C%E5%BD%93%E7%84%B6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%2A%EF%BC%8C%E6%AF%94%E5%A6%82cd%20g%2A%EF%BC%8C%E5%A6%82%E6%9E%9Cg%E7%9B%98%E4%B8%8B%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E4%BB%A5g%E5%BC%80%E5%A4%B4%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E5%88%99%E5%B0%B1%E4%BC%9A%E9%BB%98%E8%AE%A4%E8%BF%9B%E5%85%A5%E9%87%8C%E9%9D%A2%E3%80%82">gitbash如何进入你想要去的文件夹</a></li><li>使用npm install，对新文件夹进行必要的node_module模块的安装，但是千万不要使用hexo init，因为用这个命令会把配置好的_config.yml都给清空成默认值，就得重新再复制一遍了</li><li>再对git重新设置你的GitHub的用户名以及邮箱，使用下面的代码:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@163.com&quot;  </span><br></pre></td></tr></table></figure><p>注:有一点需要注意的是，如果你建立博客时，用的是ssh keys指向代码仓库的话，需要在新电脑上重新生成一个新的ssh key，再到GitHub上进行设置，但不要删除原来的ssh key；若是用的https的话可以直接不用管，如下图所示:<br><img src="https://github.com/Linctanny/pictures/blob/main/img/github%E6%8C%87%E5%90%91.png?raw=true"></p><ol start="7"><li>来到新文件夹后，输入hexo 三连</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>注:过程中可能会叫你再次输入GitHub账号，已登录修改仓库代码，那到这一步就差不多了，之后就是按照以前一样发布就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 制作博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客制作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>或是缘分，或是告别</title>
      <link href="/2022/12/07/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E6%88%96%E6%98%AF%E7%BC%98%E5%88%86%EF%BC%8C%E6%88%96%E6%98%AF%E5%91%8A%E5%88%AB/"/>
      <url>/2022/12/07/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E6%88%96%E6%98%AF%E7%BC%98%E5%88%86%EF%BC%8C%E6%88%96%E6%98%AF%E5%91%8A%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="eb661959968aab081fce7650da6e8fc91745ca5b779e1ca97191b6acfe1f1ce7">4630436162ade97ba2718b7d0c4b3b63b0b5fe33d2603d16d55298573be7e8bf1722b42e788d612f4a44cd5f2edef26b739c57c08965104e74789729919987c37901fe09b4b50d5b6269f74b431c799a73d7d97140429176fc364fa4266b7361c862e1f6499369e903fa1ce960cef4b60e6df6fbf5f138a8337fc4733720808fc0a5597e7cea31458472146b75ecbf58c1236fcae3ddbe642e61d61837cb8ecd3e30ef2863be6d605fe3e341b7b768e4d15913f05a4e51379e98045f9523feafa8cf2515555ed6813c2882420e39283873004bab315c95faf46e28f2ff1bc53946e154557160e699a52a1d53103cc496bcaadfb195440ddac8bc2fc822e3f7db7451d353c6973cf8f14d866b062a72b114d87ea96c0918fd7459a50199e8ce8019ff0aa2bd68b161e9f18227adc0cf3383a807810e04597b4441b7a99c227c7ccc8504e0c51ea98b44a7c04fd4ed6714f6060d78418524cd9f39da7c10414ea3d304322f810c5cecdc3db5a3659d15c7092ea580be05bb3eeeb90fa35cd60a8e33e2bd80c2108bde6ee99feb982636347c2ab70cd354e114c545704dd88c315b47db3d01477b64eb64c4ef26868de8acdd6e799a0685477f632ebfca48f71e5842140a1c19df27c6dc67eb4bb7f8ea92b2ea525f7e77033b00f76ae4c855f091977c101b54108d6b3f6ad20083c1929664331d1b30b8ac6b5e4cb901d6a69402f9b97a91f49d7bf6169830ba1885102cb4be1e11e7f6a3fe9af3279a6f7c2aa127893af311282e1aa0a92d0ef6625d7a818fed7faab44ae16abdbaf7d8fa852d121f84b67d2db6a126d6b08bb5bdb3558685c2a64e9d8517ffdaa689af2c0820f1adabae0bb0a53f1f63c5a1a12fc0cf82a1b3a20295c650ecc42af6629b475466d5d9cacff51d095617a8fb46bc38a181a43598cca73ad3baffb1e60b4a63cd39db334fa78b18053df7bc1644724ff7b2f2a4690ab36a41ecd0a2f155add8afbbb44c0cb41ae4a1dfd1b12d71f65e494cade67bae3129a584b68b52440baf4fc816421eff04f8342574dcdd6775843d280d34ff722d85f56f09766fefd955792c61bdf2830cb9e5d2b02d55fe273efdda295516b0ae3a8c09c63ba3bd0d073f09e40587813605f4bb30b6cee34ab4248a5b8c44fbf53cb9734f8af5847f077f93493f15f954c09eb56f61893758d310ec7dc01f2ac6ac598195b804cc171e279a3a0d920cde6b4142c830e5b9976d6dd23964c77473e650bc836d1585db73b0e5719560acd0d7cdc0682c99abb056d20fab4ae13adf174ec01cea9cd220760056e14eff5e6d1c7f2957629d78cf54afd016e2ca6bd705d8a9ad63ee6b753c3beb330e69fa420fe469df7483b58be1ea8e7ac7d246da0bf50fe59312c6049653afe0d752a0f3dbb5c2cf8160df4f5d2845cdc136af8e771de31cdbd4c0b50ab6a5ed700837cf9b0321ee12a6c492c4054da33404d6ac2783b1c84e29b6b9c2d0d7f0b4a242dc572411db96e98909e9c705ebacab49cf973c9684e42ab24b25b60aab2919d92f6b964edaf68124110b5f376c553876820d5966cbf9810a98ce601ee35db6407284901173ef8756a197afa3125f8e8fd96cce75176316814904b12665c45b04546f3951f6841715651d62693edbac6028f6f5b94b6758826ab1196f595c0b721b5762c334dfde232163c105d3d1dffd928fab441ac65e102973493b16b412ebee68ab83c5cfc0c9fa79ecab040774177339e70896d0b736618356c8010bc1b4b9400929d62c6dea3f21cc7b0c1a9e5c9536aba3c704ff324d795221c1358c9504c0158dce01c143c5c0e2b489734be8be696603c213563f14558ddadcd640c522235103a8ea166fb954bbef4337568bc0dbe8e4010ba48b9304f268a0055c89a9193b85bf00c19b17208ff2d4a94ae72ebaed8bb505fb7a81058e5478410cf002369044d6a1804c4e8d68d8b56d52da850c008c649b0aaf68dc49d675fed68d96dd8700a8738fed96a81ed4f2d90942d375bc6ae7a7107dc63de142143ca386efaeab0aa4207223de273932d2db284fdeb420992f31e1543feaeaccc7dfbdc1b568ce8ebab929d8edc4a59fb0733b60f57ed8465799bac46036cb33f4e1ed74ccce9beab7e3c090f0e9d0add3fa7a17ab0b02de5e0936a2af824139004727bd651e6b56402a11f498236fa73dad93ba2f53bce6049133692258abd6557db2c53a88872a0190db18707a2c371ff9593874d51d2988339b385407afd6e584db7ed7de929fb73ddad01a4bbbf69c267870ecb855bd59feee2e3e2c69b70323ef1c09948d021e7d86dcb3a92c9da7a59abaa444072d0f062ffa81adf7d5dc1e42f57df1c64aa1420f73884f37814c590e0d049d1e2e0bfb2e61e5f54e98f0ae676a7e2c305c3e02617be6af29e322f04f226c80e31494dd2e9e5af20d9bd37f7f0bff23ab298b7042988e30b37ac75f3562dc2e162b0b683e50e5ad7e6dcd335324e1f11d3e9ddabe66704f7a0b94a70a45b25d97944ae49b18cc52def49782463f7c7ba572d1af32418c30b82a589badbe4a091d47a45be8c05b348b83286888d23f320ca0e0b5e2f4e401b08984d860676c0f4278579544c76f67ef003e23548666e74d8f2a6e12a5b5dbfd0490e46fc3dd5caf2a0a07a0d4973fbf4a725a84dc618a64f89d98c0612350add6aa5db3892d781d90b7aec6143b9c4c9cdee3843cdd15d5a8195a9686bcb46a411200d786667aef396b91019183e9fe04d85dec0324bd5a6ac9adda1ea45e8bc58164acda28fda4bb83e152f1c0ffe045fc9fc38a327ae9f97dc68741bbf8ceabf422bed33fabefa7c965dde9fa301110b6a7a77d5f099dd4d33b81ca5e516b8b75520e6307efdd809c0037af465b1e25a5dadda91b489738dbfb4d5dd70ec4e71ca9028aaa1011482193361362945b89911f718d971cbf500e23d85d72bf3ead5aef59b381d38998ebcce17c8523801ccabd656a7f109d5f1f3ae711bc3bd666dac8f8f024b50dad8d02004b939abe656589a7082a41550b6840fd166a2c56b1c2b66a59cbd2a21fba03abafacd5043a10d762af432b2a3ccf070003341261ad071d64ef8d5946eff875f2f43671986e8019a1583f10461be1e4f51f118dfa33bd5d7db02aa85d670c830a38ab648b708cdf9b63c96ea68d3a819c3d58f7c47b6885c9a805ee6e01fcc1f5b54a5b56e4ec7ede480de533f131de64e093ef888bc65d3e05af2929fd122cb1cae85611c7c7fa6b12e4881f9d789a64cc55a2950215e19fce3829c2a2cd8a149c4bf7765260c58320c391284b4d4b59bb67f5a14de3a6524e691b9936f037b8dfe4432fce84a3baf79c41da64fa0182ea108bc6649e00ddca6286006ac8f15a5789b3a53b2d0ea76f5f7533b367d9ad09cb35c02432e9f4b0d296cc1c4c075f5c08877299992a0e6933782592065f06b828ea7bc7471ff3a993f3a4a302e342810f2258f079f277d82529f9e13bcb28ad170d69044a1f5debbff072b76d39e88083af9327e2abcdd47f0bbb4ae0be437a27de87b1cf60655175e84efbddb7a82b6937b59e5130c3bc916daf3af01b0e65302cba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.(密码非常简单，猜一猜吧!)</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单加密 </tag>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读中那些不认识的词</title>
      <link href="/2022/12/06/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/%E9%98%85%E8%AF%BB%E4%B8%AD%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%AE%A4%E8%AF%86%E7%9A%84%E8%AF%8D/"/>
      <url>/2022/12/06/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/%E9%98%85%E8%AF%BB%E4%B8%AD%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%AE%A4%E8%AF%86%E7%9A%84%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><p>  介于我在三天后就要走入考场，进行六级考试,为此123456</p>]]></content>
      
      
      <categories>
          
          <category> 英语六级单词 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>美丽心灵-究竟与Nash有何关系？</title>
      <link href="/2022/11/12/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E7%BE%8E%E4%B8%BD%E5%BF%83%E7%81%B5-%E7%A9%B6%E7%AB%9F%E4%B8%8ENash%E6%9C%89%E4%BD%95%E5%85%B3%E7%B3%BB%EF%BC%9F/"/>
      <url>/2022/11/12/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E7%BE%8E%E4%B8%BD%E5%BF%83%E7%81%B5-%E7%A9%B6%E7%AB%9F%E4%B8%8ENash%E6%9C%89%E4%BD%95%E5%85%B3%E7%B3%BB%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一文带你了解梯度是什么？快来康啊！</title>
      <link href="/2022/11/10/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%87%B8%E5%88%86%E6%9E%90/%E6%A2%AF%E5%BA%A6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2022/11/10/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%87%B8%E5%88%86%E6%9E%90/%E6%A2%AF%E5%BA%A6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><p>    在学习凸优化(最优化理论)这门课时，我经常遇到梯度(gradient)这个概念，加上数学分析里面确实提了一下，脑海里只有一点点印象，就是关于如何求一个多元函数的梯度的方法，但这远远是不够的，我对它的概念还是很含糊的，以我现在所学到的东西，就知道梯度的应用是非常广泛的，比如优化里面最基本的方法梯度下降法，次梯度等内容，为此，打算再次复习一下梯度相关的内容，并记录一下。下面主要从以下几方面进行阐述(才能解释清楚梯度的几何意义)：</p><ul><li>方向导数的定义以及求法</li><li>场的定义及分类</li><li>梯度的定义以及几何意义</li><li>梯度的简单性质</li></ul><h1>方向导数的定义以及求法</h1><p>    给定一个三元函数$u=f(x,y,z)$,在$p_{0}=(x_0,y_0,z_0)$处存在所有的一阶偏导数$f_{x}^{‘}(x_0,y_0,z_0)$,$f_{y}^{’}(x_0,y_0,z_0)$,$f_{z}^{'}(x_0,y_0,z_0)$,我们知道一元函数的导数刻画了该函数在某一点的变化率，其实多元函数的偏导数也是如此，只不过它是三个特定的方向，x轴，y轴，z轴方向，那么在$R^3$中任意一个方向的函数的变化率可以刻画吗？答案是显然可以的，就是需要用到我们等下定义的方向导数。(在我看来，方向导数就是把函数在三个特定方向(x,y,z轴)上的导数进行加权组合而已，在这里挖个坑，为什么在这三个轴上的偏导，可以组合到任何一个方向上？n维是一样的道理<del>可以学过线性代数(高等代数)或者解析几何的应该都知道</del>)</p><p>    先给出三维的方向导数，再进行拓展到有限维。</p><blockquote><p><strong>Def 1</strong>: (数学分析书上定义)设三元函数$u=f(x,y,z)$在点$p_{0}=(x_0,y_0,z_0)$的某个邻域内有定义，$l$是一条从$p_{0}=(x_0,y_0,z_0)$出发的射线，$\vec{l}=(\cos\alpha,cos\beta,cos\gamma)$是射线$l$ 的单位方向向量。在$l$上任取一点$p=(x_0+\Delta x,y_0+\Delta y,z_0+\Delta z)$,令$\rho=\sqrt{(\Delta x)^2+(\Delta y)^2+(\Delta z)^2}$,则$\Delta x=\rho cos\alpha,\Delta y=\rho cos\beta,\Delta z=\rho cos\gamma$.若极限<br>$$ \displaystyle \lim_{\rho\to0^+} \frac{f(x_0+\rho cos\alpha,y_0+\rho cos\beta,z_0+\rho cos\gamma)-f(x_0,y_0,z_0)}{\rho} $$<br>存在，则称此极限为函数u在$p_0$处沿着射线$l$的<strong>方向导数</strong>，记为$\frac{\partial f}{\partial l}\rvert_{p_0}$或$f_l^{'}(x_0,y_0,z_0)$</p></blockquote><ul><li>(说人话版解释)：这个定义和导数，偏导数定义都是类似的，导数的定义是$\displaystyle \lim_{\Delta x\to0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}$,因为导数是一维的，只有一个方向，所以不需要引入方向向量，而方向向量是有方向的，所以在分子上得加上长度在各个方向上的分解(这也意味着方向导数值是各个偏导数的分解再求和)，再距离趋于0时，极限存在，则方向导数存在。</li><li>极限取右侧趋于0，是因为距离是正的，不会从左侧趋于0</li></ul><p>    数学里面就是喜欢在定义的时候给一个极限的形式，无论是导数，偏导数，方向导数，还是以后会学到的$Frechet$导数，都是一个这样的形式。反正我当时一看到这个定义是不知道方向导数是什么的，给你一个具体的函数，叫你按照定义去求，人都会傻掉，所以就有了下面这个定理，极其重要，它告诉了我们一个函数的方向导数是怎么求的。</p><blockquote><p><strong>Theorem 1</strong>:若函数$f(x,y,z)$在$p_{0}=(x,y,z)$可微，则函数$f(x,y,z)$在点$p$沿任意射线$l$的方向导数都存在，且$$f_l^{‘}(x,y,z)=f_x^{’}(x,y,z)\ cos\alpha+f_y^{‘}(x,y,z)\ cos\beta+f_z^{’}(x,y,z)\ cos\gamma $$ 其中$\cos \alpha$,$\cos \beta$,$\cos \gamma$是射线$l$的方向余弦</p><blockquote><p>Proof:具体证明这里就不给出了，因为很简单。事实上，只要几步就能证完.讲讲思路，首先，利用函数在一点可微，把它的定义写出来，会发现这就是方向导数定义的分子，然后再除以模长，取个极限，就得到了结果，当然这里得注意一下，方向导数是右趋于0，可微定义里的是趋于0，但影响不大.</p></blockquote></blockquote><ul><li>&quot;所谓&quot;的方向余弦就是那个射线方向的单位方向向量，只不过使用余弦表示而已，$\alpha$,$\beta$,$\gamma$是射线与各个坐标轴的夹角，从这个角度来看，偏导数乘以夹角余弦就是在往射线方向进行分解罢了。</li><li>多元函数的可微是一个非常强的条件，我们在一元情况下的,可微与可导是等价的，但是在多元情况下，偏导数存在，多元函数连续，甚至于任意方向的方向导数存在都无法说明多元函数可微，可见可微是很强的，但我们在这里给出一个多元函数可微的充分条件，偏导数存在，且连续即可(具体证明可以查找数学分析书籍，都有的)。</li></ul><p>    三维情形即三元函数的方向导数我们已经知道了定义以及求法，那n元函数的方向导数和求法是可以同样类比地得到，在这就只给出相应的结论.</p><blockquote><p><strong>Def 2</strong>: (数学分析书上定义)设点$p=(x_1,x_2\dots x_n)$,$p_{0}=(x_1^0,x_2^0\dots x_n^0)$,n元函数$u=f§$在$p_0$的某个邻域内有定义，$\vec{v}=(\cos \theta_1,\cos \theta_2\dots \cos \theta_n)$是一个单位向量,$cos \theta_i$是$v$的第$i$个方向余弦。若极限<br>$$ \displaystyle \lim_{\rho\to0^+} \frac{f(p_0+\rho v)-f(p_0)}{\rho} $$<br>存在，则称此极限为函数$u=f§$在$p_0$处沿着方向$v$的<strong>方向导数</strong>，记为$\frac{\partial f}{\partial v}\rvert_{p_0}$或$f_v^{'}(p_0)$.</p></blockquote><blockquote><p><strong>Theorem 2</strong>:若$p_{0}=(x_1^0,x_2^0\dots x_n^0) \in R^n$,n元函数<br>$u$在$p_{0}$可微，则函数$f§$在点$p_0$沿单位向量$\vec{v}=(\cos \theta_1,\cos \theta_2\dots \cos \theta_n)$的方向导数都存在，且$$ \displaystyle f_v^{‘}(p_0)=\sum_{i=1}^n f_{x_i}^{’}(p_0)\ cos\theta_i$$</p></blockquote><h1>场的定义及分类</h1><blockquote><p><strong>Def 3</strong>:物理学中，一些量在空间中的分布叫做场，场包括数量场和向量场。</p></blockquote><p>    场的分类是看该在空间中分布的物理量是标量还是矢量，如果是标量，则该场叫做数量场，在数学上的形式是一个多元函数；而如果是矢量，则该场叫做向量场，在数学上的形式是向量值函数。例如，密度场，温度场都是数量场，密度和温度都是标量；而引力场，速度场，磁场是向量场，引力，速度，磁场线都是矢量，是有方向的</p><h1>梯度的定义以及几何意义</h1><blockquote><p><strong>Def 4</strong>: $设D\subset R^2为开集，(x_0,y_0) \in D 为一定点.如果函数z=f(x,y)在(x_0,y_0)点可偏导，则称向量(f_x(x_0,y_0),f_y(x_0,y_0))为f在点(x_0,y_0)的梯度，记为$<strong>grad</strong>$f(x_0,y_0)$，即$$ gradf(x_0,y_0)=f_x(x_0,y_0)i+f_y(x_0,y_0)j.<br>$$</p></blockquote><p>    现在我们知道梯度是什么了，那么为什么下图中梯度的负方向是下山最快的方向呢？<br><img src="https://github.com/Linctanny/pictures/blob/main/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.png?raw=true "><br>  梯度从计算公式上来看就是一个多元函数分别对其自变量求偏导，组合在一起而形成的一个向量，故梯度实际上是一个向量场。<br>  我们回顾一下一个多元函数$u=f(x,y)$在点$p_0$的沿任意一个方向$v$的方向导数，且$|\vert v||=1$,即它的方向向量是单位方向向量，故有下式成立：<br>$$<br>\begin{equation}<br>\begin{split}<br>\frac{gradf}{\partial v}(x_0,y_0) &amp;=f_x^{‘}(x_0,y_0)\cos \theta_1+f_y^{’}(x_0,y_0)\cos\theta_2 =gradf \bullet v \\<br>&amp;=||grad f||||v||\cos(gradf,v)  \\<br>&amp;= ||gradf||\cos(gradf,v)<br>\end{split}<br>\nonumber<br>\end{equation}<br>$$<br>    由上式子可以看出，函数$f$在其任何一个可微点的方向导数的绝对值不会超过它在改点的梯度的模长，且最大值$||grad f||$在它的梯度方向达到。这就是说，沿着梯度方向函数值增加地最快,同样，$f$的方向导数的最小值$-||grad f||$ 在梯度的反方向达到，或者说，沿着梯度的相反方向函数值减少地最快。在梯度下降法中，就是时刻地选取函数的负梯度方向进行变化，使得函数尽快地达到最小值。(这点我们以后可以继续谈到)<br>  我们这里定义的只是一个二元函数，事实上，对于一个n元函数，该定义可以完全类推过去，也是求偏导，然后组合成一个向量(前提肯定也要所有的偏导数存在啦)</p><h1>梯度的简单性质</h1><p>    梯度的简单性质，在某种程度上来说，就是导数的性质的变种，它主要有以下4个性质：</p><ol><li>$若f\equiv c (c是一个常数)$，则$gradf=\vec{0}$;</li><li>$\alpha,\beta为常数，则grad(\alpha f+\beta g)=\alpha gradf+\beta grad g $;</li><li>$grad(f\bullet g)=f\bullet gradg+g \bullet gradf$;</li><li>$\displaystyle grad\frac{f}{g}=\frac{g\bullet grad f-f\bullet grad g}{g^2}$</li></ol><p>    当你把grad换成导数或者偏导也是完全成立的，因为梯度的定义就是用偏导来定义的(利用定义把它展开，然后再合并同类项整理一下就行)</p><h1>下篇预告</h1><ul><li>数学分析中常见的不等式及其证明(估计要写很久了)<br>    至于写这个的原因主要是我在学习凸优化的过程中，证明一个函数是否是凸函数时，出现了一个<strong>Maler Inequality</strong>，它的结论直接就能证明我所需要的结果，加上我们经常会遇到<strong>Cauchy-schwarz不等式</strong>的运用(欧几里得空间的定义)，或者范数的定义中会遇到三角不等式(这个只是个说法，并不是一个真正的不等式)需要用<strong>Holder不等式</strong>，亦或者是高中就会的<strong>绝对值不等式</strong>(它具有非常广泛的应用)，又或是泛函分析中证明一个距离是否成立需要用到的<strong>闵可夫斯基不等式</strong>(小声bb，博主在面试某华中985时就被问到过)，它们真的是非常有用的，我以前也未能仔细总结，故借此机会总结一波(啊啊啊啊，下篇公式警告!!!)</li></ul><h1>参考资料</h1><blockquote><ol><li>龚循华.数学分析讲义(下册).北京:科学出版社,2016.8</li><li>陈纪修.数学分析第三版(下册).北京:高等教育出版社,2019.5</li><li>图片来源于:<a href="https://blog.csdn.net/JaysonWong/article/details/119818497">https://blog.csdn.net/JaysonWong/article/details/119818497</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 凸优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凸优化 </tag>
            
            <tag> 数学分析 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mathjax语法</title>
      <link href="/2022/11/01/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/mathjax%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/11/01/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/mathjax%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><p>  依我个人而言，数学是一门符号语言，数学家们创造出了一系列的抽象的符号来具象的表现出他们深邃的思想。数学的世界，犹如符号的海洋，符号的排列组合却是逻辑思维，命题推导的论证过程。在《数学史》这门课上，我的老师无数次强调数学不存在因果关系，而是命题间的推导关系。<del>笔者也不清楚，这已经上升到了哲学的程度</del>因此，作为他们的承载物，符号，便显得无比重要。虽说语言文字的力量是无比强大的，但是借助了符号的展现，能让我们体会到数学的符号之美，体会到数学的跨越语言之美。（任何文字都只是起到一定的辅助作用罢了）二十六个英文字母是远远不够的，为此，他们引进了希腊字母来进行表示，各种符号语言的出现，更能帮助我们理解，认识他背后的意义。</p><h1>Mathjax与LaTex</h1><p>  MathJax是一款运行在浏览器中的开源数学符号渲染引擎，使用MathJax可以方便的在浏览器中显示数学公式，不需要使用图片。目前，MathJax可以解析Latex、MathML和ASCIIMathML的标记语言。Mathjax语法和LaTex的语法相差不是很大，掌握Mathjax对于掌握LaTex还是大有裨益的。<br>  本文接下来会讲述MathJax的基础用法，但不涉及MathJax的安装及配置。此外，推荐使用vscode进行编辑(强烈安利)，它具有丰富的插件，同时它支持Markdown和MathJax，本文使用此编辑器撰写。</p><h1>基础语法</h1><h2 id="如何插入公式-行内公式-行间公式">如何插入公式(行内公式/行间公式)</h2><h3 id="行内公式">行内公式</h3><p>使用<code>$...$</code>包含所要表达的公式，例如<code>$\sum_&#123;i=0&#125;^n i^2 = \frac&#123;(n^2+n)(2n+1)&#125;&#123;6&#125;$</code><br>显示为：$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$</p><h3 id="行间公式">行间公式</h3><p>使用<code>$$...$$</code>包含所要表达的公式，例如<code>$$\sum_&#123;i=0&#125;^n i^2 = \frac&#123;(n^2+n)(2n+1)&#125;&#123;6&#125;$$</code>,显示为：$$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$$<br>或者使用mathjax的语法进行自动编号，但是要在<strong>equation</strong>或者<strong>align</strong>环境下使用<del>其实就是在begin和end后面用大括号括起equation或者align，即是使用该环境</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$\begin&#123;equation&#125;</span><br><span class="line">y = ax+b</span><br><span class="line">\end&#123;equation&#125;$</span><br></pre></td></tr></table></figure><p>效果如下:<br>$\begin{equation}<br>y = ax+b<br>\end{equation}$</p><h2 id="如何输入希腊字母">如何输入希腊字母</h2><p>一般语法是\+读音，例如：<code>$\alpha\beta$</code>,即$\alpha\beta$，意味着只要你会读，在Mathjax or LaTex中就能把它表示出来。我把大部分能用到的希腊符号放在附录里面，自己忘记的话，可以查询附录或者直接<a href="https://baike.baidu.com/item/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D/4428067?fr=aladdin">点击这里</a>。<br>注意：</p><ol><li>希腊字母会分大小写，大写字母就是在读音的首字母大写，小写就是首字母小写,例如<code>$\Gamma$</code>:$\Gamma$;<code>$\gamma$</code>$\gamma$</li><li>在代数，分析，拓扑等课程中里面表示变换，拓扑空间通常会用Latin字母(就是书上的花体字母，准确来说是calligraphic letters)，mathjax是支持的，可以用<code>$\mathcal+英文字母$</code>（mathcal后需要空一格），例如：<code>$\mathcal A $</code>:$\mathcal A $,<code>$\mathcal B $</code>:$\mathcal B$</li><li>对于各种字母的各种字体，见下面图片，用法与2一致。<br><img src="https://github.com/Linctanny/pictures/blob/main/img/%E5%AD%97%E6%AF%8D%E5%AD%97%E4%BD%93%E8%AF%B4%E6%98%8E.png?raw=true" alt="字体说明"></li></ol><h2 id="如何输入上下标">如何输入上下标</h2><h3 id="上标">上标</h3><p>上标用<code>^</code>,例如：<code>$x^2$</code>:$x^2$</p><h3 id="下标">下标</h3><p>下标用<code>_</code>,例如：<code>$x_2$</code>:$x_2$<br>通常会结合起来使用，如<code>$x_i^2$</code>:$x_i^2$;<code>$y_1^2$</code>:$y_{1}^{2}$.但为了与LaTex语法的兼容性，可以这样使用：<code>^&#123;&#125;</code>,<code>_&#123;&#125;</code><br>注意：</p><ol><li>注意大括号表示所形成的一个group(群组)：<code>$&#123;x^y&#125;^z$ </code>:${x^y}^z$;<code>$x^&#123;y^z&#125;$ </code>:$x^{y^z}$</li></ol><h2 id="如何插入括号-适应分数">如何插入括号(适应分数)</h2><p>我们直接用(),[],{}可以在文本中表现出来，例如：<code>$ [2+3]$</code>:$[2+3]$;<code>$ (2+3)$</code>:$(2+3)$,但是遇到分数的话，括号会无法自动匹配大小，例如:<code>$(\frac&#123;x&#125;&#123;y&#125;)$</code>:$(\frac{x}{y})$;我们可以在括号的前面加上<code>\left</code>,<code>\right</code>,例如:<code>$\left(\frac&#123;x&#125;&#123;y&#125;\right)$</code>:$\left(\frac{x}{y}\right)$;<br>除了小括号，以下符号也适用此规则：</p><ul><li>{}:<code>$\&#123;\frac&#123;x&#125;&#123;y&#125;\&#125;$</code>: ${\frac{x}{y}}$</li><li>[]:<code>$[\frac&#123;x&#125;&#123;y&#125;]$</code>: $[\frac{x}{y}]$</li><li>||:<code>$|\frac&#123;x&#125;&#123;y&#125;|$</code>:$|\frac{x}{y}|$</li><li>范数符号：<code>$\vert\frac&#123;x&#125;&#123;y&#125;$</code>:$\vert\vert\frac{x}{y}\vert\vert$</li><li>内积符号:<code>$\langle\frac&#123;x&#125;&#123;y&#125;\rangle$</code>:$\langle\frac{x}{y}\rangle$</li><li>向上取整：<code>$\lceil\frac&#123;x&#125;&#123;y&#125;\rceil$</code>:$\lceil\frac{x}{y}\rceil$</li><li>向下取整：<code>$\lfloor\frac&#123;x&#125;&#123;y&#125;\rfloor$</code>:$\lfloor\frac{x}{y}\rfloor$</li><li>积分分隔号:<code>$\left.x^2\right\rvert$_2^3</code>:$\left.x^2\right\rvert_2^3$</li></ul><h2 id="如何插入求和和积分号">如何插入求和和积分号</h2><h3 id="求和">求和</h3><p>求和符号用<code>\sum</code>:$\sum$.若要加上下标可以直接用<code>_&#123;&#125;</code>与<code>^&#123;&#125;</code>,例如：<code>$\sum_&#123;i=1&#125;^&#123;\infty&#125;&#123;x_i&#125;^2$</code>:$\sum_{i=1}^{\infty}{x_i}^2$</p><h3 id="积分">积分</h3><p>求积分符号用<code>\int</code>:$\int$.若要加上下限，可以直接用<code>_</code>与<code>^</code>,例如：<code>$\int_&#123;1&#125;^&#123;2&#125;&#123;x&#125;^2dx$</code>：$\int_{1}^{2}{x}^2dx$<br>注意：</p><ul><li>求多重积分时，多重积分符号可以加i，几重就写几个i，若是n重可以直接用dots代替，例如：<code>$\iint$</code>:$\iint$;<code>$\iiint$</code>：$\iiint$；<code>$\idotsint$</code>：$\idotsint$</li><li>连乘符号是：<code>$\prod$</code>:$\prod$,加上下标同理</li><li>观察前面的求和与积分的上下标，尤其是求和，是放在了求和号的右边，为了美观可以加上<code>\displaystyle</code>使其上下限在符号上下放置,例如,<code>$\displaystyle\sum_&#123;i=1&#125;^&#123;\infty&#125;&#123;x_i&#125;^2$</code>：$\displaystyle\sum_{i=1}^{\infty}{x_i}^2$</li></ul><h2 id="如何插入分数">如何插入分数</h2><p>使用<code>$\frac&#123;&#125;&#123;&#125;$</code>,第一个大括号是分子，第二个大括号是分母。例如，<code>$\frac&#123;x&#125;&#123;y&#125;$</code>：$\frac{x}{y}$</p><h2 id="如何插入根式">如何插入根式</h2><p>插入平方根的话，一般使用<code>\sqrt</code>,例如，<code>$\sqrt&#123;x^3&#125;$</code>:$\sqrt{x^3}$,而xxx的1/4方根的话，可以直接用{}来表示，用这种形如<code> \&#123;...\&#125;^&#123;m/n&#125;</code>,例如，${x^2}^{1/8}$</p><h3 id="如何插入函数名（正弦，极限等）">如何插入函数名（正弦，极限等）</h3><p>正弦函数，极限的表达式一般是用roman font 而不是italic font，故正弦一般用<code>\sin </code>,例如，<code>$\sin x$</code>:$\sin x$;极限的表达使用<code>\lim</code>,带下标用<code> \lim_&#123;x\to 0&#125;</code>表示,例如，<code>$\lim_&#123;x\to0&#125; \frac&#123;\sin x&#125;&#123;x&#125;$</code>:$\lim_{x\to0} \frac{\sin x}{x}$<br>注意：</p><ol><li>由于极限的下标和求和符号一样，会出现在右边，而不是正下方，为此，可以采取和求和一样的方法，加上<code>\displaystyle</code>,例如，<code>$ \displaystyle \lim_&#123;x\to0&#125; \frac&#123;\sin x&#125;&#123;x&#125;$</code>：$ \displaystyle \lim_{x\to0} \frac{\sin x}{x}=1$</li><li>对于自己定义的函数，可以用<code>\operatorname&#123;函数名&#125;(x)</code>来表示，例如，<code>$\operatorname&#123;g&#125;(x)$</code>:$\operatorname{g}(x)$</li></ol><h2 id="如何插入特殊符号-各种奇奇怪怪的符号">如何插入特殊符号(各种奇奇怪怪的符号)</h2><p>各种各样奇奇怪怪的符号可以去参考资源3寻找，那里放置了两个pdf，非常的全面。对于一些常用的符号，看下面的截图(主要是一些箭头和集合论里的符号)<br><img src="https://github.com/Linctanny/pictures/blob/main/img/%E5%B8%B8%E8%A7%81%E7%AC%A6%E5%8F%B7.png?raw=true" alt="常见符号说明"><br>再介绍一个<a href="https://detexify.kirelabs.org/classify.html">神奇的网站</a>(同时也会放在参考资源里)，用鼠标在页面上画出你想要的符号，它在旁边会出现相似的tex符号(无法保证在mathjax上可以实现)</p><h2 id="如何在公式中产生空格">如何在公式中产生空格</h2><p>Mathjax是无法识别空格的，为了产生空格，可以在公式间加上<code>\,</code>,<code>\;</code>,<code>\quad</code>,<code>\qqaud</code><br>例如，</p><ul><li><code>$a\,b$</code>:$a,b$</li><li><code>$a\;b$</code>:$a;b$</li><li><code>$a\quad b$</code>:$a\quad b$</li><li><code>$a\quad b$</code>:$a\quad b$</li></ul><h2 id="如何插入“帽子”">如何插入“帽子”</h2><ul><li><code>$\hat&#123;x&#125;$ </code>:$\hat{x}$</li><li><code>$\widehat&#123;xy&#125;$</code>:$\widehat{xy}$</li><li><code>$\bar&#123;x&#125;$</code>:$\bar{x}$</li><li><code>$\overline&#123;xy&#125;$</code>:$\overline{xy}$</li><li><code>$\vec&#123;x&#125;$</code>:$\vec{x}$</li><li><code>$\overrightarrow&#123;xy&#125;$</code>:$\overrightarrow{xy}$</li><li><code>$\dot&#123;x&#125;$</code>:$\dot{x}$</li><li><code>$\ddot&#123;x&#125;$</code>:$\ddot{x}$</li></ul><h2 id="如何输入矩阵">如何输入矩阵</h2><h3 id="无括号矩阵">无括号矩阵</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$ </span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; x &amp; x^2 \\</span><br><span class="line">1 &amp; y &amp; y^2 \\</span><br><span class="line">1 &amp; z &amp; z^2 \\</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">$$ </span><br></pre></td></tr></table></figure><h2 id="如何正在mathjax在进行公式对齐推导">如何正在mathjax在进行公式对齐推导</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\begin&#123;split&#125;</span><br><span class="line">\frac&#123;\partial^2 f&#125;&#123;\partial&#123;x^2&#125;&#125; &amp;= \frac&#123;\partial(\Delta_x f(i,j))&#125;&#123;\partial x&#125; = \frac&#123;\partial(f(i+1,j)-f(i,j))&#125;&#123;\partial x&#125; \\</span><br><span class="line">&amp;= \frac&#123;\partial f(i+1,j)&#125;&#123;\partial x&#125; - \frac&#123;\partial f(i,j)&#125;&#123;\partial x&#125; \\</span><br><span class="line">&amp;= f(i+2,j) -2f(f+1,j) + f(i,j)</span><br><span class="line">\end&#123;split&#125;</span><br><span class="line">\nonumber</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>在上面的公式中，begin{split} 表示开始多行公式，end{split}表示结束；第一个式子的等号之前要有个&amp;,来进行定位，公式中用\表示回车到下一行，&amp;表示对齐的位置，\之后要跟着&amp;,这样下一个等号才知道要对齐哪一个。从第三行开始输入公式，效果如下:<br>$$\begin{equation}<br>\begin{split}<br>\frac{\partial^2 f}{\partial{x^2}} &amp;= \frac{\partial(\Delta_x f(i,j))}{\partial x} = \frac{\partial(f(i+1,j)-f(i,j))}{\partial x} \\<br>&amp;= \frac{\partial f(i+1,j)}{\partial x} - \frac{\partial f(i,j)}{\partial x} \\<br>&amp;= f(i+2,j) -2f(f+1,j) + f(i,j)<br>\end{split}<br>\nonumber<br>\end{equation}<br>$$<br>注：如果你输入\没有实现换行的效果，那大概是你的浏览器解析的时候把\当做了转义符，这个时候你再加两个\就行了，即输入\\</p><h1>参考资源</h1><blockquote><ol><li>一个英文的网站MathJax basic tutorial and quick reference，网上大多数教程也是由此翻译而来</li></ol><blockquote><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044">https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044</a></p></blockquote><ol start="2"><li>众多网络博主的优秀教程(在此就不一一列举了)</li></ol><blockquote><p><a href="http://t.zoukankan.com/linxd-p-4955530.html">http://t.zoukankan.com/linxd-p-4955530.html</a><br><a href="https://dandelioncloud.cn/article/details/1559921295481872385">https://dandelioncloud.cn/article/details/1559921295481872385</a><br><a href="https://www.cnblogs.com/wangxin37/p/8185688.html">https://www.cnblogs.com/wangxin37/p/8185688.html</a></p></blockquote><ol start="3"><li>奇奇怪怪的符号pdf</li></ol><blockquote><p><a href="https://pic.plover.com/MISC/symbols.pdf">https://pic.plover.com/MISC/symbols.pdf</a><br><a href="https://mirrors.mit.edu/CTAN/info/symbols/comprehensive/symbols-a4.pdf">https://mirrors.mit.edu/CTAN/info/symbols/comprehensive/symbols-a4.pdf</a></p></blockquote><ol start="4"><li>识别符号转tex网站</li></ol><blockquote><p><a href="https://detexify.kirelabs.org/classify.html">https://detexify.kirelabs.org/classify.html</a></p></blockquote></blockquote><h1>附录</h1>]]></content>
      
      
      <categories>
          
          <category> 语法总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个我经常遇到的上传github问题</title>
      <link href="/2022/10/31/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/%E4%B8%80%E4%B8%AA%E6%88%91%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%8A%E4%BC%A0github%E9%97%AE%E9%A2%98/"/>
      <url>/2022/10/31/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/%E4%B8%80%E4%B8%AA%E6%88%91%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%8A%E4%BC%A0github%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="错误描述">错误描述</h2><p>  在每一次我写好博客，准备上传github时，在我hexo clean+hexo g+hexo s后，按下hexo d之后，果不其然，一串熟悉的报错出现了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (D:\blogdocuments\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (node:events:394:28)</span><br><span class="line">    at ChildProcess.cp.emit (D:\blogdocuments\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br></pre></td></tr></table></figure><h2 id="错误解决">错误解决</h2><p>  我搜寻了很多办法之后，发现最好用的还是暴力删除加hexo三联就行(hexo clean+hexo g+hexo s).<br>1.首先来到你的博客根目录下，找到.deploy_git文件，直接删除，不用害怕，hexo三联之后会重新产生的<br><img src="https://github.com/Linctanny/pictures/blob/main/img/%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98.png?raw=true"><br>2.直接执行hexo三联就好了,之后看到下图就成功了！<br><img src="https://github.com/Linctanny/pictures/blob/main/img/%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%982.png?raw=true"></p>]]></content>
      
      
      <categories>
          
          <category> 制作博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 制作博客 </tag>
            
            <tag> 错误解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备考六级-词汇篇</title>
      <link href="/2022/10/31/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/%E5%A4%87%E8%80%83%E5%85%AD%E7%BA%A7-%E8%AF%8D%E6%B1%87%E7%AF%87-%E4%B8%80/"/>
      <url>/2022/10/31/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/%E5%A4%87%E8%80%83%E5%85%AD%E7%BA%A7-%E8%AF%8D%E6%B1%87%E7%AF%87-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface">Preface</h2><p>  这次六级的考试，emmm，怎么说呢，一开始以为报不上名的，所以有段时间没放在心上，但是呢，在一个阳光明媚的下午，我的手机他发出了滴的一声，我收到了一个短信，“Amuse同学，你的预约已被受理，请尽快前往cet进行缴费”，那个时候，脑子一热，居然被我等到了(结果，大家好像都递补上了，哈哈)，屁颠屁颠地打开cet，想也没想的送钱去了，呜呜呜呜，就报了名。后来，在浏览我的好兄弟<a href="https://jusetiz.github.io/">Juse</a>的博客时，发现了一个很神奇的操作–下面这个黑块块，所以就产生了把单词放在这里，不记得意思可以点一下，再回忆一下。</p><h2 id="学习资源">学习资源</h2><p>  我主要是通过b站的视频学习，具体可以参考：<a href="https://www.bilibili.com/video/BV1ob4y1872S/?p=8&spm_id_from=333.788.top_right_bar_window_history.content.click&vd_source=ea4737a919763490cc5572e8499dad37">点击这里哦</a></p><h2 id="新词速记">新词速记</h2><ul><li>offset   <del>v 弥补，补偿</del></li><li>heave   <del>v 用力举起</del> ps：用heavy记忆</li><li>bruise  <del>n 擦伤，淤青</del></li><li>assert  <del>v.坚持，断言</del></li><li>fragile  <del>adj. 易碎的，脆弱的</del> ps:可以和fraction 碎片一起记</li><li>versatile  <del>adj.多才多艺的,多功能的</del></li><li>aesthetic  <del>a.美学的 n.(+s) 美学</del></li><li>flap  <del>v.飘动，（大幅度）振翅飞</del> ps: be in a flap 慌乱  flip v.轻击，指尖弹</li><li>loom  <del>n.织布机 vi.隐约出现</del>  ps:loom large （内心）显得沉重而无法避免, gloom 阴暗，灰暗</li><li>shatter  <del>v.破碎，使梦想破灭</del>  ps:shatter one’s dream 使某人梦想破灭</li><li>arch  <del>n.拱 v.拱起 </del></li><li>cosmopolitan  <del>adj.世界性的</del>  ps:metropolitan 大都市的  cosmic 宇宙的</li><li>gasp  <del>n/v.大声地吸气</del>  ps:at one’s last gasp 奄奄一息  用gas汽油来记</li><li>conceit  <del>n.自负，自大</del> ps:多用其adj conceited adj.自负的 用来形容一个人过于自信以至于骄傲</li><li>antagonism  <del>n.对抗，敌对</del> ps:hostile,enemy,repel,rebel</li><li>illicit <del>adj.违禁的，违法的</del> ps：illegal</li><li><em><strong>traffic</strong></em> <del>n.交通，通信，车辆 v.非法交易</del>  ps：过去分词：trafficked  现在分词：trafficking</li><li>merchandise <del>n.商品</del> ps：goods</li><li>juvenile <del>adj.青少年的 n.未成年人</del>  ps:youth ,youngster,adolescent</li><li><em><strong>endorse</strong></em> <del>vt.赞同，认可，记录违章事项，背书(替别人担保)</del> ps：endorsement</li><li>flirt <del>v.调情</del> ps：任何一部美剧必出现的词汇，哈哈哈</li><li>dissent <del>vi.持不同意见，有异议</del> ps:多用于法案，选举是否通过；consent 同意</li><li>bill  <del>n.账单，法案，议案</del></li><li>confer <del>v.授予，商谈</del> ps:offer ,conference</li><li>blink <del>v.眨眼睛，灯光闪烁 n.眨眼睛 </del>  ps:in the blink of an eye 一瞬间   on the blink 失灵，出故障</li><li>perpetual <del>adj.永久的</del> ps：permanent</li><li>flutter <del>v.振翼，挥动 <del> ps:多指鸟类拍打翅膀</li><li>alien  <del>n.外国人，外星人 adj.外国的</del>  ps:foreigner</li><li>agitate <del>v.鼓动，使焦虑</del></li><li>referendum <del>n.全民公投</del> ps：关于投票的单词：弃权，弃票：abstain  同意：consent  不同意：dissent</li><li>hurdle <del>n.栏架，障碍</del> ps：刘翔的成名，没错就是那个  也有obstacle</li><li>prosper <del>vi.繁荣 </del>  ps：prosperous,boom</li><li>epidemic <del>n.传染病 adj.流行的 </del>  ps:vaccination 疫苗</li><li>autobiography <del>n.自传</del> ps：biography n.传记</li><li>turmoil <del>n.骚动，混乱</del></li><li>homogeneous <del>adj. 同种类的</del>  ps:网络热梗homo<del>homosexuality</del>和它同源</li><li>rigid <del>adj.严格的，僵硬的</del> ps:stable ,robust</li><li>aspire <del> vi.追求，渴望</del> ps:expire 过期  inspire 鼓舞 aspiration n.</li><li>embark <del> v.上船</del>  ps：embark on 从事，着手</li><li>pesticide <del>n.杀虫剂</del></li><li>infest <del>vi.大量滋生，寄生于</del>  ps:flea 跳蚤</li><li>oppress <del>vt.压迫，压制</del>compress 压缩,suppress 镇压</li><li>discrepancy <del>n.差异，不符合之处</del></li><li>eccentric <del>adj.古怪的，异常的 n.古怪的人</del> ps:odd</li><li>limp <del>vi.蹒跚 adj.无精神的，无力的</del> ps：limb 臂</li><li>override <del>vt.否决</del></li><li>afloat <del>adj/adv. 漂浮的 </del></li><li>defer <del>v.拖延</del> ps：defer to 遵守 put off delay</li><li>evade <del>vt.逃避</del> ps:invade</li><li><em><strong>etiquette</strong></em> <del>n.礼节，礼仪</del></li><li>stickler <del>n.坚持细节的人，顽固的人</del></li><li>arrogant <del>adj.傲慢的</del> ps:conceited</li><li>prey <del>n.猎物，受害者 v.猎取</del> ps:pray 祈祷</li><li>radiate <del>v.散发，从中心散开</del></li><li>quest <del>n.搜寻，探求</del></li><li>permeate <del>v.充满，弥漫</del></li><li>spectator <del>n.观众</del></li><li>clutch <del>n.一小群，离合器 v.抓住</del> ps: in sb’s clutches 在某人的掌握中</li><li>condolence <del>n.吊唁</del></li><li>absurd <del>adj.荒谬的</del></li><li>adore <del>vt.热爱，爱慕 </del> ps：adore your idol adj.adorable 爱慕的</li><li>petition <del>n.请愿书，诉状 v.请求</del></li><li>abolish <del>vt.废除，取消</del></li><li>dispense <del>vt.分配，提供</del> ps：indispensable adj.不可或缺的</li><li>concede <del>v.让步，允许，承认</del> receding hair line  后退的<del>发际线</del> exceed v超出</li><li>subsidy <del>n.津贴，补助金</del></li><li>fraud <del>n.欺诈，诈骗</del></li><li>nominate <del>vt.提名，任命</del></li><li>reproach <del>vt/n. 责备，指责</del></li><li>default <del>n/vi 默认状态，违约，不履行义务</del></li><li>franchise <del>n.特许经营权 选举权</del></li><li>hover <del>vi.悬浮，徘徊，摇摆不定</del></li><li>slam <del>v.砰地关上，猛击</del></li><li>autonomous <del>adj.自治的</del></li><li>exquisite <del>adj.精美的，敏锐的</del> ps:acute,elaborate 精心制作，详细描述</li><li>porcelain <del>n.瓷器 adj.易碎的</del> ps：blue and white porcelain 青花瓷</li><li>buzz <del>n.喧闹，嗡嗡嗡声 vi.发出嗡嗡声</del></li><li>subsistence <del>n.勉强维持生活</del> ps：subsist v.勉强维持生活</li><li>configuration <del>n.布局，构造</del> ps：configure v.安置，布置，配置</li><li>conceive <del>v.想象，构想，怀孕</del> ps：脑海中想象，属于思维层面  而perceive是感知层面上的感觉</li><li>collide <del>vi.碰撞，冲突</del> ps：n. 碰撞 collisiion</li><li>threshold <del>n.起始点，门槛</del></li><li>zigzag <del>n.z字形 v.曲折前行</del></li><li>relish <del>vt.享受 n.乐趣，调味品</del> ps:relax+cherish  放松+珍惜</li><li>bilateral <del>adj.双边的</del> ps: monolateral 单边的 trilateral 三边的 multilateral 多边的</li><li>convene <del>v.集合，召集</del></li><li>counteract <del>v.抵消，中和 </del></li><li>convict <del>v.证明…有罪 n.囚犯</del> ps:convict sb of sth 判决某人有…罪</li><li>foul <del>adj.下流的，发臭的 v.弄脏 n.犯规</del> ps:foul up 搞乱，破坏</li><li>prototype <del>n.原型，典型</del></li><li>affirm <del>vt.断言，坚定</del></li><li>dogma <del>n.教条，信条</del></li><li>code<del>n.代码，准则 v.敲代码</del></li><li>eject <del>vt.驱逐，喷射</del> ps:eject sb from  把某人从…驱逐</li><li>legitimate <del>adj.合理的，合法的 vt.使合法</del></li><li>flatter <del>vt.奉承</del> ps:flatter sb about/on 奉承某人的…</li><li>glide<del> n/vi. 滑动，滑行</del></li><li>batter <del>v.猛烈打击 n.面糊 </del></li><li>inherent <del>a.固有的，内在的</del></li><li>assimilate <del>v理解，吸收，消化</del></li><li>prolong <del>v.延长</del></li><li>temperance <del>n.戒酒，节欲 adj.温暖的</del></li><li>mindset <del>n.思维模式</del></li><li>sue <del>v.控告 vi.要求</del></li><li>deceptive <del>adj.欺骗性的</del> ps:deceive v.欺骗</li><li>amass <del>vt.积累</del> ps:accumulate</li><li>speculator <del>n.投机者</del> ps:speculate v.投机，推测</li><li>subordinate <del>n.部属 adj.下级的，次要的 vt.处于次要地位</del> ps:be subordinate to 比…次要，比…低</li><li>mentor <del>n.导师，顾问</del></li><li>monopoly <del>n.垄断，专卖</del></li><li>fracture <del>n.裂缝，骨折</del> ps:frac-表示break, fraction n.分数，部分</li><li>induce <del>v.诱导，引起</del> ps:等同于cause</li><li>extract <del>vt.取出，提取获得 n.提出物</del></li><li>exposition <del>n.解释，展览会 </del></li><li>susceptible <del>adj.易受攻击的</del> ps:be susceptible to 受…影响，等同于fragile,vulnerable</li><li>predecessor <del>n.前任</del></li><li>magnitude<del>n.重要性，巨大</del></li><li>void <del>n.真空，空虚感 adj.空的，无效的</del></li><li>monotony <del>n.单调乏味，千篇一律</del> ps:monotonous adj.单调的</li><li>weary <del>adj.疲惫的</del></li><li>enclose <del>vt.围住，附入 </del> ps；enclosure n.圈占地，信</li><li>abbreviation <del>n.缩写</del></li><li>intricate <del>adj.错综复杂的</del></li><li>divert <del>vt.改道，转移</del></li></ul><ol start="26"><li>fringe <del>a.边缘的 n.刘海，边缘</del></li><li>disperse <del>v.分散，消散</del></li><li>alleviate <del>vt.减轻，缓解</del></li><li>spectacular <del>adj.壮观的</del> ps：magnificient,majestic,grand,splendour,splendid</li><li>spectacle <del>n.精彩的演出，壮观</del> ps:make a spectacle of oneself 出洋相</li><li>escalate <del>v.升级，升高</del> ps:escalator n.扶梯</li><li>cynical <del>adj.愤世嫉俗的</del> ps；be cynical about 不相信，对…愤世嫉俗</li><li>whereby <del>adv.由此，借由</del></li><li>stereotype <del>n.老一套 vt.对…存有成见</del></li><li>displace <del>vt.取代</del></li><li>embody <del>vt.代表，体现，包括</del></li><li>embed <del>v.嵌入</del></li><li>bleach <del>v.变白，漂白 n.漂白剂</del></li><li>toxic <del>adj.有毒的</del> ps:poisonous</li><li>bewilder<del>vt.使迷惑</del></li><li>appease <del>vt.平息</del></li><li>leaflet <del>n.传单，小册子</del> ps:hang out leaflets 发小传单</li><li>offspring <del>n.子女，后代</del></li><li>ardent<del> adj.热烈的，热心的</del></li><li>entrepreneur <del>n.企业家</del></li><li>suppress <del>vt.压制，镇压</del></li><li>saturate <del>vt.使满足，浸透</del> ps:be saturated with 充满…</li><li>intrigue<del>n.阴谋 vi.密谋</del></li><li>dividend <del>n.红利，分红</del> ps:pay dividens 有回报，有好结果</li><li>reservoir <del>n.蓄水池,汇集</del></li><li>convoy<del>vt.护航 n.舰队</del></li><li>agony <del>n.极度痛苦</del> ps:既值物理上(physical)又指心理上(mental)</li><li>escort <del>vt.陪同，护卫 n.护卫者</del> ps:under…escort 在…的护卫下</li><li>inject <del>vt.注射，注入</del> ps:inject sth. into sb 把某物注入某人的体内</li><li>precede <del>vt.在…之前，领先于</del> ps: precedent n.实例，范例</li><li>crisp <del>adj.脆的</del></li><li>imperative <del>adj.极其重要的</del> ps:The emperor sontrols the empire.</li><li>tribute <del>n.致敬,礼品</del></li><li>jargon<del>n.行话，黑话</del></li><li>pharmacy <del>n.药房</del></li><li>brink <del>n.边缘</del> ps:on the brink of 在…的边缘 edge of Tomorrow 明日边缘(电影)</li><li>portray <del>vt.描绘，扮演</del> ps：portray a portrait 画一幅半身像</li><li>sober <del>adj.清醒的，冷静的</del></li><li>snap <del>咔嚓一声 </del> ps:snap at 厉声说话，猛咬</li><li>huddle <del>v.挤作一团 n.聚在一起的人</del></li><li>premium <del>a.优质的，售价高的 溢价</del>ps:be at a premium 奇缺</li><li>endeavour <del>n/vi.尽力，努力</del> ps；make every endeavour to do 竭尽全力做某事</li><li>milestone <del>n.里程碑</del></li><li>diabetes <del>n.糖尿病</del> ps:a kind of disease that makes people produce a lot of urine and feel very thirsty</li><li>urine <del>n.尿</del></li><li>recurrence <del>n.再发生，循环，复发</del></li><li>alongside <del>adv.在旁边</del> ps:next to or at the side of of somebody</li><li>choke <del>v.噎住 n.窒息</del> ps：to make somebody unable to breath when drinkding some water or fluid</li><li>ongoing <del>adj.仍在进行的，不停的</del> ps:continuing to exist without stopping</li><li>automation <del>n.自动化</del> ps: the use of machine to do work that was done by people</li><li>safeguard <del>n.保卫措施</del></li><li>redundancy <del>n.多余，冗余</del> ps:redundant adj.多余的</li><li>presumption <del>n.推测，假设</del>ps: the act of supposing that something is true</li><li>contractor <del>n.承包人</del> ps:contract v.承包，签订</li><li>refutation <del>n.反驳 </del></li><li>evade<del>v.躲避</del> ps: to escape from somebody or avoid meeting somebody</li><li>prone <del>adj.俯卧的,有…的倾向</del></li><li>notwithstanding <del>prep.尽管，虽然</del></li><li>ladder <del>n.梯子</del>ps:a device used for climbing that hao two long pieces of wood ,metal or rope with a series of steps</li><li>predominate <del>v.占…主要地位</del></li><li>linger <del>v.逗留</del></li><li>trick <del>n.恶作剧，诡计 v.哄骗</del> ps:play a trick on sb 捉弄某人</li><li>allocate <del>v.分配，配给</del></li><li>load <del>v.装载，使担负 n.承载量</del></li><li>plentiful<del>adj.丰富的</del></li><li>confrontation <del>n.对抗</del></li><li>regiment <del>n.团</del> ps:regiment of soilders 兵团</li><li>dine<del>v.用正餐，吃饭</del></li><li>supervisor<del>n.导师，监督员</del></li><li>premature <del>adj.早产的 n.早产儿</del></li><li>rehearse <del>v.排练，预演</del>ps:to practice or make people practice a play</li><li>wary <del>adj.谨慎的，小心的</del> ps:have a wary stare at somebody 谨慎地盯着某人</li><li>ethnic<del>adj.民族的</del>ps: different ethnic groups 不同的民族</li><li>preoccupy <del>v.专注于，迷住</del>ps:be preoccupied with worry about her son 满脑子都是担心她的儿子</li><li>terrorist <del>n.恐怖主义者</del></li><li>reign <del>v.占主导地位，统治 n.统治时期</del></li><li>burial <del>n.葬礼</del></li><li>relish <del>v.享受 n.调味品</del></li><li>psychiatric <del>adj.精神病的</del></li><li>bold <del>adj.大胆的，勇敢的 n.粗体</del></li><li>obsess<del>vt.迷住，使着迷</del>ps:be obsessed with 沉迷于</li><li>liver <del>n.肝</del></li><li>ignorance <del>n.无知，愚昧</del></li><li>presume <del>vt.推测</del></li><li>comply<del>vi.遵守，服从</del>ps:comply with traffic regulations 遵守交通规则 explanation:obey a rule</li><li>rejoice <del>v.感到欣喜</del></li><li>preoccupied <del>adj.全神贯注的</del></li><li>coral<del>n.珊瑚</del></li><li>unleash<del>v.释放，解开…的束缚</del> ps:to suddenly let a strong force,emotion be felt or have an effect</li><li>problematic<del>difficult to understand,solve,or fix 有疑惑的</del></li><li>reconciliatory <del>adj.和解的</del></li><li>latter <del>n.后者</del></li><li>permit<del>vt.允许，许可 n.执照</del></li><li>sacrifice <del>v.牺牲，奉献 n.祭品</del> ps:to give up something valued for the sake of other considerations</li><li>prerequisite <del>n.先决条件 adj.必要的</del>ps：something must exist or happen before something else can happen or be done</li><li>shark <del>n.鲨鱼，骗子</del></li><li>maritime <del>adj.海上的，沿海的</del>ps:located near or next to the sea</li><li>refugee<del>n.难民，避难者 adj.避难的</del></li><li>compensation<del>n.赔偿金，补偿</del></li><li>lamb <del>n.小羊</del></li><li>proofread <del>v.校正</del></li><li>competent<del>adj.有能力的</del></li><li>regimental<del>adj.团的</del></li><li>amuse<del>vt.使发笑</del>ps:to make sb laugh or smile</li><li>reminiscent<del>adj.暗示…的</del></li><li>entire <del>adj.完整的</del></li><li>physiological<del>adj.生理的</del></li><li>allot <del>v.分配，分派</del></li><li>curriculum<del>n.课程，全部课程</del></li><li>recipient <del>n.接受者，容器 adj.善于接受的</del></li><li>functional <del>adj.功能性的</del></li><li>owl <del>n.猫头鹰</del></li><li>prohibit <del>v.禁止</del></li><li>rejoicing<del>n.喜庆</del></li><li>contagious<del>adj.有传染性的</del></li><li>attempt<del>vt.试图 n.努力</del>ps:attempt to do 试图做</li><li>processor<del>n.加工机</del></li><li>chemical <del>n.化学制品 adj.化学的</del></li><li>rigidity<del>n.僵硬</del></li><li>detergent <del>n.洗涤剂</del></li><li>repertoire<del>n.全部节目</del></li><li>porter <del>n.行李员</del></li><li>consect <del>v.同意，批准</del></li><li>beverage <del>n.饮料</del></li><li>peril<del>n.危险</del>ps:serious danger</li><li>repression<del>n.压制，镇压</del></li><li>utility<del>n.用途，功用</del></li><li>noticeable<del>adj.显著的，明显的</del></li><li>pit <del>n.大坑 v.使凹陷</del></li><li>futile <del>adj.无用的</del></li><li>dwarf<del>n.侏儒vt.发育不全</del></li><li>rehabilitate<del>v.使康复</del></li><li>basis <del>n.基础</del></li><li>mighty<del>adj.强大的 adv.非常</del></li><li>prejudice<del>成见，偏见</del></li><li>scrutiny <del>n.监视，细看</del>ps:under the scrutiny of 在…的监视下</li><li>corner <del>n.角落，困境</del></li><li>relentless <del>adj.顽强的</del></li><li>ingenuity <del>n.机灵，心灵手巧</del></li><li>rapid <del>adj.迅速的</del></li><li>hostile<del>adj.敌对的，有敌意的</del></li><li>proof <del>n.证据，证明</del></li><li>sympathetic<del>adj.可怜的</del></li><li>tablet<del>n.碑，药片</del></li><li>remarkable<del>adj.显著的，非凡的</del></li><li>hopeful<del>adj.有希望的</del></li><li>ceramic<del>adj.陶器的 n.陶瓷制品</del></li><li>primary<del>adj.初等的，首要的 n.首选</del></li><li>scandal <del>n.丑闻，丢脸</del></li><li>buzz <del>v.发出嗡嗡声</del></li><li>retrieval <del>n.取回，恢复</del></li><li>ease <del>n.轻松，安逸 v.解除痛苦</del></li><li>portion<del>n.一部分 vt.把…分成份额</del></li><li>badge <del>n.徽章，象征 v.给…做标记 </del></li><li>criticism <del>n.批评，评论</del></li><li>ritual<del>n.仪式，例行公事</del></li><li>tack<del>n.平头钉 v.钉住</del></li><li>proximity<del>n.接近，临近</del></li><li>nationwide<del>adv.在全国 adj.全国范围的</del></li><li>sinister<del>adj.不吉祥的 </del></li><li>prop<del>n.道具，支柱 </del></li><li>adulthood<del>n.成年期</del></li><li>tempt <del>v.诱惑，引诱</del></li><li>profile<del>n.侧面像，外形 v.描绘…的轮廓</del></li><li>offend <del>v.冒犯</del> ps:speculation n.猜想</li><li>reminiscence <del>n.回忆，怀旧</del></li><li>label <del>n.标签</del></li><li>salvation<del>n.拯救，救助</del></li><li>retrospect <del>n.回顾，追溯 v.回顾，回想</del></li><li>consume <del>vt.消耗，耗尽 </del></li><li>alcoholic<del>n.酗酒者,adj.含酒精的</del></li><li>transit<del>n/v. 运输，运送</del></li><li>rehabilitation<del>n.恢复</del></li><li>epic<del>n.史诗</del></li><li>moist <del>adj.潮湿的</del></li><li>hazard <del>n.危险，公害</del></li><li>conscious<del>adj.清醒的，有意识的</del></li><li>recipe<del>n.食谱，方法</del></li><li>span<del>n.跨度，时间段</del></li><li>grace<del>n.优美，慈善 vt.给…增光</del></li><li>minister<del>部长，大臣</del></li><li>rim<del>n.边缘</del></li><li>conspire<del>v.密谋策划</del></li><li>efficient<del>adj.效率高的</del></li><li>diminish<del>v.减少，削弱</del></li><li>staple<del>vt.用订书钉钉,主要的 n.订书钉</del></li><li>retrospective<del>adj.回顾的，回忆的</del></li><li>warranty<del>n…保修单</del></li><li>neglect<del>v.疏于照顾，忽视 n.忽视</del></li><li>industrial<del>adj.工业的</del></li><li>sacred<del>adj.神圣的</del></li><li>text<del>n.文本，正文</del></li><li>revenge<del>n.报复，报仇 v.为…报仇</del></li><li>gasp<del>v.喘气</del></li><li>etiquette<del>n.礼仪</del></li><li>fierce<del>adj.凶猛的</del></li><li>concentration<del>n.专注</del></li><li>rigid<del>adj.坚硬的</del></li><li>profession<del>n.职业</del></li><li>detect<del>v.侦查，探测</del></li><li>incredibly<del>adv.难以置信地</del></li><li>rot<del>v.腐烂，腐败</del></li><li>offspring<del>n.后代</del></li><li>salmon<del>n.鲑鱼</del> ps:a large fish with silver skin and  pink flesh that is used for food.</li><li>persuasive <del>adj.有说服力的, n.诱因</del></li><li>cattle<del>n.牛，牲口</del></li><li>reaction<del>n.反应</del></li><li>sector <del>n.部分，部门</del></li><li>qualification <del>n.资格证明,限制条件</del></li><li>escalate<del>v.逐步升高，逐步增强</del></li><li>resolve <del>n.决心v.解决</del></li><li>salute<del>v.向…敬礼,致敬</del></li><li>hemisphere <del>n.半球</del></li><li>stalk <del>n.茎,梗 </del></li><li>component<del>n.零件 adj.组成的</del></li><li>slide<del>v.使滑动 n.幻灯片</del></li><li>rotate<del>v.旋转，以…轴旋转</del></li><li>worship<del>v.崇拜，爱戴 n.(西方的宗教)礼拜</del></li><li>cooperative <del>adj.合作的 n.合作社</del></li><li>tailor<del>n.裁缝 vt.调整…以适应</del></li><li>stimulate<del>v.刺激</del></li><li>edible<del>adj.可食用的</del></li><li>ruthless<del>adj.残忍的</del></li><li>saddle <del>n.鞍，鞍部</del></li><li>weed<del>n.野草，杂草</del></li><li>salution<del>n.招呼</del></li><li>oath <del>n.誓言,誓约</del></li><li>rotation<del>n.旋转</del></li><li>underestimate <del>v.低估，对…估计不足</del></li><li>expiration<del>n.期满</del></li><li>salon<del>n.客厅,美容美发店</del></li><li>penalty<del>n.惩罚，处罚</del></li><li>rigor <del>n.严厉,严格</del></li><li>literate<del>adj.能说会写的,受过教育的</del></li><li>perish<del>v.死去，老去</del></li><li>sanitary<del>adj.卫生的</dek></li><li>recite<del>v.背诵，朗读</del></li><li>dig<del>v.挖掘</del></li><li>refund<del>n.退款</del></li><li>substitute<del>vt.代替者 n.替补，代替物</del></li><li>blaze<del>v.熊熊大火,燃烧 n.火焰</del></li><li>religious<del>adj.宗教的</del></li><li>sanction<del>n.批准 v支持</del></li><li>complimentary <del>adj.称赞的</del></li><li>erupt<del>v.火山喷发</del></li><li>ridge<del>n.山脉</del></li></ol><ul><li>metric<del>adj.米制的</del></li><li>sanitation<del>n.环境卫生</del></li><li>resist<del>v.抵制</del></li><li>allure<del>n.诱惑力 v.诱使</del></li><li>dough<del>n.生面团</del></li><li>revolt<del>v.反抗，背叛</del></li></ul><h2 id="新词运用">新词运用</h2><ul><li>多才多艺的演员  versatile actors/talented actors</li><li>易碎的花瓶  fragile vase</li><li>举起杠铃    heave the barbells</li><li>靠兼职弥补微薄的工资 offset the little sallary by a part-time job</li><li>内心沉重  loom large  (很奇怪的搭配)</li><li>某人梦想破灭 shatter one’s dream</li><li>上海是一个世界性的大都市  Shanghai is a cosmopolitan city</li><li>进行违法交易  traffic illicit merchandises</li><li>认可你的计划  endorse your plan</li><li>永恒的问题  perpetual argument</li><li>出故障（不灵了）  on the blink</li><li>在他管理下，经济百花齐放   The economy prospered under his administration</li><li>在某人的领导下  under one’s administration</li><li>经历大骚乱  live through the big turmoil</li><li>内战 civil war</li><li>微调政策 fine-tuned politics</li><li>满足刚性需求(刚需) meet the rigid demand</li><li>翻译一下：大约有四十个城市出台了楼市微调政策，以满足购房者的需求  <del>About forty cities have fine-tune politics to meet the rigid demand of home buyers.  </del></li><li>从事 着手 embark on</li><li>受…伤害 fall prey to</li><li>试图欺骗 prey on</li><li>寻找某事 in quest of sth.</li><li>一小群年轻学生 a clutch of young students</li><li>一句很扎心的话：我们忽视崇拜我们的人，却仰慕忽视我们的人  <del>We ignore the ones who adore us and adore the ones who ignore us.</del></li><li>摈弃，不用 dispense with</li><li>因某事指责某人 reproach sb for sth.</li><li>设想做某事  conceive of doing sth.</li><li>把某物/某人想象成 conceive of sth./sb as</li><li>与…相冲突 collide with</li><li>达到经济底线 meet the financial threshold</li><li>道德准则  moral code</li><li>在…上滑行 glide over</li><li>理解这些事实 assimilate these facts</li><li>虚假宣传 deceptive advertising</li><li>摇摆不定 be susceptible to others’opinions</li><li>从…中提取 extract…from</li><li>世界博览会 world’s Exposition</li><li>用歌声打破单调乏味的旅程 broke the monotony of the weary journey with songs</li><li>边缘的集合：verge,fringe,rim,edge,brim,margin,boundary,border</li><li>在…的边缘：on the fringe of</li><li>减轻外在压力: alleviate/relieve the external pressure</li><li>民族 ethnic group</li><li>牺牲生命 sacrifice one’s life</li><li>使身体有缺陷的人回复正常生活 rehabilitate the physically disabled</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> 六级单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2022/10/07/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/10/07/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1>Preface</h1><p>  由于我也是第一次用markdown来记东西，所以需要总结一下markdown的语法帮助自己，故萌生了这个想法。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> # 一级标题</span><br></pre></td></tr></table></figure><h1>一级标题</h1><p>1.## 二级标题   ### 三级标题 #### 四级标题</p><p>2.井号与标题名称需空一空格，才能显示放大效果</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 加粗：<span class="strong">**加粗**</span></span><br></pre></td></tr></table></figure><p>**加粗  **   加粗</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 斜体：<span class="emphasis">*斜体*</span></span><br></pre></td></tr></table></figure><p><em>斜体</em>    斜体</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">4.</span> 划横线：~~The world is flat.~~   </span><br></pre></td></tr></table></figure><p><s>The world is flat.</s></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">5.</span> 下划线: <span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span> 下划线<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><u> 下划线</u></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">6.</span> 引用块: </span><br><span class="line">一级引用块&gt;Lemma1:</span><br><span class="line">二级引用块&gt;&gt;lemma2:</span><br><span class="line">以此类推，几个&gt;就是几级引用块</span><br></pre></td></tr></table></figure><blockquote><p>Lemma1:</p><blockquote><p>lemma2:</p></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">7.</span> 1.有序列表</span><br><span class="line">   2.有序列表</span><br><span class="line">   3.有序列表</span><br></pre></td></tr></table></figure><p>1.有序列表<br>2.有序列表<br>3.有序列表</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">8.</span> 无序列表：</span><br><span class="line"><span class="bullet">-</span> </span><br><span class="line"><span class="bullet">-</span> </span><br><span class="line"><span class="bullet">-</span> </span><br></pre></td></tr></table></figure><ul><li>无序列表</li><li>无序列表</li><li>无序列表</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">9.</span> 代码块:<span class="code">```</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">char</span> argv,<span class="type">char</span> args[])</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;hello  world!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">10.</span> 链接：[<span class="string">markdown语法</span>](<span class="link">https://markdown.com.cn（网址）</span>)</span><br></pre></td></tr></table></figure><p><a href="https://markdown.com.cn">markdown语法</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">11.</span> 插入图片： ![<span class="string">trick</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure><p>对于插入图片来说，由于markdown里面也是可以识别html语言的，</p><p><img src="https://github.com/Linctanny/pictures/blob/main/img/p2.jpeg?raw=true" alt="宫崎骏"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">12.</span>  - [x] Write the press release</span><br><span class="line"><span class="bullet">    -</span> [x] Update the website</span><br><span class="line"><span class="bullet">    -</span> [ ] Contact the media</span><br></pre></td></tr></table></figure><ul><li><p>[x] Write the press release</p></li><li><p>[x] Update the website</p></li><li><p>[ ] Contact the media</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">13.</span>  markdown中的空格是继承了html中一样的特性，无法识别键盘上的空格，需要用代码来实现，用&amp;nbsp; ps：&amp;和后面的;是英文的分号</span><br></pre></td></tr></table></figure><ol start="14"><li>markdown里面的表格可以采取以下的形式:</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 数学符号           | latex代码               |   表格的第一行</span><br><span class="line">| ------------------ | ----------------------- |  确认表格第一行的分隔线</span><br><span class="line">| 省略号             | \cdots                  |  表格内容，中间用三条竖线分隔即可</span><br></pre></td></tr></table></figure><table><thead><tr><th>数学符号</th><th>latex代码</th></tr></thead><tbody><tr><td>省略号</td><td>\cdots</td></tr></tbody></table><h1>Latex公式(数学公式)</h1><h2 id="一、公式使用参考">一、公式使用参考</h2><h3 id="1-行内公式与独立公式">1.行内公式与独立公式</h3><p><strong>行中公式可以用如下方法表示：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 表达式 $</span><br></pre></td></tr></table></figure><p>显示为：</p><p>$  y=x_{1}^2+x_{2}^3 $</p><p><strong>独立的公式可以用如下的方法表示：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$ </span><br><span class="line"> 表达式 </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>显示为：<br>$$<br>y=x_{1}^2+x_{2}^2\text{,独立公式才可以编号（手动or自动）}\tag{1.1}<br>$$<br>**若需要手动编号，可在公式后使用 <code>\tag&#123;编号&#125;</code> 语句。 **</p><p>例子如上；</p><p><strong>若需要自动编号，可在全文任意处使用<code>\eqref&#123;公式名&#125;语句引用</code></strong></p><p>自动编号需要用如下方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="code">    表达式</span></span><br><span class="line"><span class="code">    \label&#123;当前公式名(即别称)&#125;</span></span><br><span class="line"><span class="code">$$</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在$eqref&#123;a1&#125;$中，这是爱因斯坦提出的著名的质能守恒方程：</span><br><span class="line">$$</span><br><span class="line">    E=mc^2\label&#123;a1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>E=mc^2\label{a1}<br>$$<br>在$\eqref{a1}$中，这是爱因斯坦提出的著名的质能守恒方程：</p><h3 id="2-公式上下标的表示">2.公式上下标的表示</h3><p>上标通常用<code> ^</code>来表示</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x^2$</span><br></pre></td></tr></table></figure><p>显示为：</p><p>$x^2$</p><p>下标通常用<code>_</code>来作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x_1,x_2$</span><br></pre></td></tr></table></figure><p>显示为：</p><p>$x_{12},x_2$</p><h3 id="3-分式的表达">3.分式的表达</h3><p>一般是利用<code>\frac</code>来进行表示，它有大括号分别表示分子，分母的内容，前面为分子，后面为分母</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">  y=\frac&#123;x<span class="emphasis">_1&#125;&#123;x_</span>2^3&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>显示为：<br>$$<br>y=\frac{x_1}{x_2^3}<br>$$</p><h3 id="4-一些常用的数学符号">4.一些常用的数学符号</h3><table><thead><tr><th>数学符号</th><th>latex代码</th></tr></thead><tbody><tr><td>省略号</td><td>\cdots</td></tr><tr><td>根号</td><td>\sqrt{}</td></tr><tr><td>矢量箭头</td><td>\vec{a}</td></tr><tr><td>不定积分号</td><td>\int{}dx</td></tr><tr><td>定积分号</td><td>\int{1}^{2}{x}dx</td></tr><tr><td>极限符号</td><td>\lim{}</td></tr><tr><td>求和符号</td><td>\sum{}</td></tr><tr><td>求和符号(带上下标)</td><td>\sum_{i=1}^{100}{x}</td></tr><tr><td>连乘符号</td><td>\product{}</td></tr><tr><td>连乘符号(带上下标)</td><td>\product_{j=1}{12}{y_j}</td></tr><tr><td>希腊字母α</td><td>\alpha</td></tr><tr><td>希腊字母β</td><td>\beta</td></tr><tr><td>希腊字母gama(大写)</td><td>\Gama</td></tr><tr><td>希腊字母γ(小写)</td><td>\gama</td></tr><tr><td>Δ</td><td>\Delta</td></tr><tr><td>δ</td><td>\delta</td></tr><tr><td>ϵ</td><td>\epsilon</td></tr><tr><td>ε</td><td>\varepsilon</td></tr><tr><td>ζ</td><td>\zeta</td></tr><tr><td>η</td><td>\eta</td></tr><tr><td>Θ</td><td>\Theta</td></tr><tr><td>θ</td><td>\theta</td></tr><tr><td>λ</td><td>\lambda</td></tr><tr><td>μ</td><td>\mu</td></tr><tr><td>ν</td><td>\nu</td></tr><tr><td>ξ</td><td>\xi</td></tr><tr><td>π</td><td>\pi</td></tr><tr><td>ρ</td><td>\rho</td></tr><tr><td>σ</td><td>\sigma</td></tr><tr><td>τ</td><td>\tau</td></tr><tr><td>ϕ</td><td>\phi</td></tr><tr><td>Φ</td><td>\Phi</td></tr><tr><td>ψ</td><td>\psi</td></tr><tr><td>Ψ</td><td>\Psi</td></tr><tr><td>ω</td><td>\omega</td></tr><tr><td>Ω</td><td>\Omega</td></tr></tbody></table><p>$$ \lim_{x\rightarrow0}{\frac{x}{\sin{x}}=1} \tag{1.2} $$</p><p>$$\begin{matrix}<br>1&amp;0&amp;0\\<br>0&amp;1&amp;0\\<br>0&amp;0&amp;1\\<br>\end{matrix}$$</p><p>$$<br>f(n) =<br>\begin{cases}<br>n/2,  &amp; \text{if $n$ is even} \\<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$<br>$$<br>\begin{equation}<br>\begin{split}<br>\frac{\partial^2 f}{\partial{x^2}} &amp;= \frac{\partial(\Delta_x f(i,j))}{\partial x} = \frac{\partial(f(i+1,j)-f(i,j))}{\partial x} \<br>&amp;= \frac{\partial f(i+1,j)}{\partial x} - \frac{\partial f(i,j)}{\partial x} \<br>&amp;= f(i+2,j) -2f(f+1,j) + f(i,j)<br>\end{split}<br>\nonumber<br>\end{equation}<br>$$<br>$$<br>\begin{equation}<br>\sum_{i=0}^n F_i \cdot \phi (H, p_i) - \sum_{i=1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 )<br>\end{equation}<br>$$<br>$$<br>\begin{equation}<br>\beta^*(D) = \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i=1}^n max(0, 1 - y_i f_{\beta}(x_i))<br>\end{equation}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 语法总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博主碎碎念</title>
      <link href="/2022/10/06/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E5%BC%80%E5%B1%B1%E4%B9%8B%E4%BD%9C/"/>
      <url>/2022/10/06/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E5%BC%80%E5%B1%B1%E4%B9%8B%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1>My words</h1><p>开这个博客的话，主要是想</p><ul><li><p>记录一下自己所学过的知识，包括但不限于数学，英语，计算机等，以巩固自己的所学，加深自己的记忆！！</p></li><li><p>自己关于学习的一些想法或者自己踩过的坑</p></li><li><p>顺便记录一下自己以后的生活吧，比如和xdm的happy time（ps：就是我自己的碎碎念呗），自己生活上遇到的一些小问题。</p><p><s>如果对你有所帮助的话，不妨把它分享出去，但请注明出处即可</s>（虽然我觉得看的人只有amuse，juse，robustvase，or vegetable，maybe tayy）。</p></li></ul><h1>About me</h1><h2 id="我是谁？">我是谁？</h2><ul><li>只不过是一个卑微的<strong>数学研究生</strong>！</li><li>个人性格直接，非常之<strong>坦率</strong>、<strong>有话就说</strong> <del>直男，哈哈</del></li><li>比较较真吧，天赋之一——打破沙锅问到底</li></ul><h2 id="我所喜欢的things">我所喜欢的things</h2><ul><li>在自己的domain里面research–但求有所成就</li><li>看看“文学作品”(ps:especially老玄幻，都市人了，哈哈)</li><li>和friends打游戏(所以plan to record our happy memories)</li><li>打乒乓球  del&gt;也算吧，虽然菜鸡水平，哈哈</del></li></ul><h2 id="引路人">引路人</h2><p>一个非常自恋的人，哈哈哈，一个非常稳健的花瓶（个人翻译，纯属娱乐，请勿当真），但还是很感谢他，同时也是我的好哥们<a href="https://robust-vase.github.io/">Vase</a></p><p>最后以一句话自勉：</p><blockquote><p>凡是过往，皆为序章；凡是未来，皆可期待。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
